@isTest
public with sharing class HDT_LC_CanaleIVRNoShareTst {
    
    //DEBUG
    public static final String TEST_NAME = 'HDT_LC_CanaleIVRNoShareTst';
    
    
    //TEST SETUP
    
    
    
    //TESTS
    
    //getOrderByUsernamePassword
    @isTest
    private static void getOrderByUsernamePasswordTest() {
        
        //DEBUG
        String debugString = TEST_NAME + ' - ' + 'getOrderByUsernamePasswordTest';
        System.debug(debugString);
        
        //SETUP
        String username = '';
        String password = '';
        
        //TESTING
        HDT_LC_CanaleIVRNoShare myChannel = new HDT_LC_CanaleIVRNoShare();
        List<Order> result = myChannel.getOrderByUsernamePassword(username, password);
        
        //ASSERTS
        System.assertEquals(0, result.size());
        
    }
    
    //getActivityByOrder
    @isTest
    private static void getActivityByOrderTest() {
        
        //DEBUG
        String debugString = TEST_NAME + ' - ' + 'getActivityByOrderTest';
        System.debug(debugString);
        
        //SETUP
        List<Account> accList = HDT_UTL_DataFactoryTst.createAccountBusiness(1, true, 'HERA COMM', 'Azienda', 'Aziende SME');
        List<Order> ordList = HDT_UTL_DataFactoryTst.createOrder(1, true, accList[0].id, 'Bozza');
        List<ServicePoint__c> servPointList = HDT_UTL_DataFactoryTst.createServicePoint(1, true);
        List<Contact> contactList = HDT_UTL_DataFactoryTst.createContact(1, true, accList[0].id);
        List<Contract> contractList = HDT_UTL_DataFactoryTst.createContract(1, true, accList[0].id);
        List<Case> caseList = HDT_UTL_DataFactoryTst.createCase(1, true, accList[0].id, contactList[0].Id, servPointList[0].id, contractList[0].id, ordList[0].id);
        
        DocumentalActivity__c myDoc = HDT_UTL_DataFactoryTst.createDocumentalActivity(1, ordList[0].Id, caseList[0].Id)[0];
        
        //TESTING
        HDT_LC_CanaleIVRNoShare myChannel = new HDT_LC_CanaleIVRNoShare();
        DocumentalActivity__c result = myChannel.getActivityByOrder(ordList[0].Id);
        
        //ASSERTS
        System.assertNotEquals(null, result);
        System.assertEquals(myDoc.Id, result.Id);
        
    }
    
    //getPlico
    @isTest
    private static void getPlicoTest() {
        
        //DEBUG
        String debugString = TEST_NAME + ' - ' + 'getPlicoTest';
        System.debug(debugString);
        
        //SETUP
        List<Account> accList = HDT_UTL_DataFactoryTst.createAccountBusiness(1, true, 'HERA COMM', 'Azienda', 'Aziende SME');
        List<Order> ordList = HDT_UTL_DataFactoryTst.createOrder(1, true, accList[0].id, 'Bozza');
        List<ServicePoint__c> servPointList = HDT_UTL_DataFactoryTst.createServicePoint(1, true);
        List<Contact> contactList = HDT_UTL_DataFactoryTst.createContact(1, true, accList[0].id);
        List<Contract> contractList = HDT_UTL_DataFactoryTst.createContract(1, true, accList[0].id);
        List<Case> caseList = HDT_UTL_DataFactoryTst.createCase(1, true, accList[0].id, contactList[0].Id, servPointList[0].id, contractList[0].id, ordList[0].id);
        
        DocumentalActivity__c myDoc = HDT_UTL_DataFactoryTst.createDocumentalActivity(1, ordList[0].Id, caseList[0].Id)[0];
        
        //WEBSERVICE MOCK
        //Mock HTTP
        //???
        
        //Mock HDT_WRP_DocumentalResponse.HDT_WRP_PostelResponse via HDT_WS_PostSalesTstMock
        Test.setMock(HttpCalloutMock.class, new HDT_WS_PostSalesTstMock());
        
        //TESTING - DocumentalActivity__c
        HDT_LC_CanaleIVRNoShare myChannel = new HDT_LC_CanaleIVRNoShare();
        Map<String,String> result = myChannel.getPlico(myDoc.Id);
        
        //ASSERTS
        System.assertNotEquals(null, result);
        System.assertEquals('OK', result.get('outcome'));
        
        //TESTING - DocumentSendTracking__c
        
        
        //ASSERTS
        
        
        //TESTING - Null
        
        
    }
    
    
    
    
}

/**
 * @description       : Controller for HDT_LCP_CloneCanceledOrder
 * @author            : gabriele.rota@webresults.it
 * @group             : WR
 * @last modified on  : 2021-08-02
 * @last modified by  : gabriele.rota@webresults.it
**/
public without sharing class HDT_LC_CloneCanceledOrder {

    private static final String CLONE_PERMISSION = 'HDT_CP_CloneCanceledOrder';
    private static final Integer CANCELLATION_EXPIRE_DAYS = 60;

    private static HDT_QR_Order orderQr = new HDT_QR_Order();
    private static HDT_SRV_Order orderSrv = new HDT_SRV_Order();

    /**
    * @description Check if the order can be cloned and clone it if allowed
    * @author gabriele.rota@webresults.it | 2021-09-16 
    * @param orderId  
    **/
    @AuraEnabled
    public static void cloneOrder(Id orderId){

        if (!FeatureManagement.checkPermission(CLONE_PERMISSION)) {
            throw new AuraHandledException('L\'Utenza non è abilitata alla funzionalità Clona');
        }

        Order currentOrder = [SELECT CancellationRequestDate__c FROM Order WHERE Id = :orderId WITH SECURITY_ENFORCED LIMIT 1];
        Boolean isStillValid = (currentOrder.CancellationRequestDate__c!=null &&
            currentOrder.CancellationRequestDate__c.daysBetween(Date.today())<=CANCELLATION_EXPIRE_DAYS);

        if (!isStillValid) {
            throw new AuraHandledException('È possibile clonare gli Ordini solo nei primi '+CANCELLATION_EXPIRE_DAYS+' giorni dall\'annullamento');
        }

        try {
            currentOrder.Phase__c = 'Bozza';
            currentOrder.Status = 'In Lavorazione';
            currentOrder.IsCloned__c = true;
            currentOrder.IncomingCreditCheckResult__c = null;

            currentOrder.Step__c = 2;
            List<ServiceRequest__c> servRequests = [SELECT Id FROM ServiceRequest__c WHERE Order__c=:orderId WITH SECURITY_ENFORCED];
            if (!servRequests.isEmpty()) {
                HDT_UTL_DatabaseService.deleteSObject(servRequests);
            }

            orderSrv.updateRecord(currentOrder);
        } catch (Exception e) {
            throw new AuraHandledException(e.getMessage());
        }
    }
}

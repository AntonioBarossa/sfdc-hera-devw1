/**
 * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
 * @date 30/10/2020
 * @description HDT_LC_ConfigureProduct.cls - Class that holds methods that are called from hdtConfigureProduct.js
 * @history Inserire Nome Cognome – Data Modifica – Descrizione della modifica
 */
public inherited sharing class HDT_LC_ConfigureProduct {
    
    private static HDT_QR_Quote quoteQr = new HDT_QR_Quote();
    private static HDT_SRV_Quote quoteSrv = new HDT_SRV_Quote();
    private static HDT_QR_SaleServiceItem saleServiceItemQr = new HDT_QR_SaleServiceItem();
    private static HDT_SRV_SaleServiceItem saleServiceItemSrv = new HDT_SRV_SaleServiceItem();
    private static HDT_QR_QuoteLine quoteLineQr = new HDT_QR_QuoteLine();
    private static HDT_SRV_QuoteLine quoteLineSrv = new HDT_SRV_QuoteLine();
    private static HDT_QR_Opportunity opportunityQr = new HDT_QR_Opportunity();
    private static HDT_SRV_Opportunity opportunitySrv = new HDT_SRV_Opportunity();
    private static HDT_SRV_Sale saleSrv = new HDT_SRV_Sale();
    private static HDT_SRV_ActivityCustom actSrv = new HDT_SRV_ActivityCustom();
    private static HDT_QR_Recordtype rctype = new HDT_QR_Recordtype();

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @date 18/11/2020
     * @description Get SBQQ__Quote__c and SBQQ__QuoteLine__c records to fill table
     * @param String Sale.Id
     * @return List<Map<String,List<SObject>>>
     */
    @AuraEnabled
    public static List<Map<String,List<SObject>>> getQuotes(String saleId){

        List<Map<String,List<SObject>>> resultsList = new List<Map<String,List<SObject>>>();

        quoteSrv.checkReadAccess('Name,SBQQ__Opportunity2__r.Name,SBQQ__Type__c,AmendmentAllowed__c,ContractReference__c');
        quoteLineSrv.checkReadAccess('Name,ServicePoint__c,ServicePoint__r.ServicePointCode__c,BillingProfile__c,BillingProfile__r.Name,AmendmentAllowed__c,SBQQ__Product__r.Name,SBQQ__Quote__r.Name,SBQQ__Quote__r.SBQQ__Opportunity2__r.Name');

        List<SBQQ__Quote__c> quoteList = quoteQr.getActiveRecords(saleId);
        List<SBQQ__QuoteLine__c> quoteLineList = quoteLineQr.getRecordsBySale(saleId);

        resultsList = quoteLineSrv.groupRecordsByQuote(quoteList, quoteLineList);

        return resultsList;
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @date 19/11/2020
     * @description Cancel SBQQ__Quote__c record by changing its status (Status=”Annullata”) and related Opportunity (StageName= “Chiusa/Annullata”)
     * @param String quoteId
     * @param String opportunityId
     * @param String cancellationReason
     */
    @AuraEnabled
    public static void cancelQuote(String quoteId, String opportunityId, String cancellationReason){
        
        SBQQ__Quote__c quoteToUpdate = new SBQQ__Quote__c(
            Id = quoteId,
            CancellationReason__c = cancellationReason
        );

        switch on cancellationReason {
            when  'Errata operativita'{
                quoteToUpdate.SBQQ__Status__c = 'Cancelled';
            }
            when 'Volonta cliente'{
                quoteToUpdate.SBQQ__Status__c = 'Rejected';
            }
        }

        Opportunity oppToUpdate = new Opportunity(
            Id = opportunityId,
            StageName = 'Closed Lost'
        );

        quoteSrv.updateRecord(quoteToUpdate);
        opportunitySrv.updateRecord(oppToUpdate);
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @date 02/02/2021
     * @description Check if all Quotes have QuoteLines configured
     * @param Sale__c sale
     */
    public static void checkQuotesHaveQuoteLines(Sale__c sale){
        //all quotes should have quotelines
        quoteLineSrv.checkReadAccess('Name,SBQQ__Product__r.Name,SBQQ__Quote__r.Name,SBQQ__Quote__r.SBQQ__Opportunity2__r.Name,ServicePoint__c');
        List<SBQQ__QuoteLine__c> quoteLinesActive = quoteLineQr.getActiveRecords(sale.Id);

        quoteSrv.checkReadAccess('Name,SBQQ__Opportunity2__r.Name,SBQQ__Type__c,SBQQ__Status__c,SBQQ__Ordered__c,SBQQ__LineItemsGrouped__c,SBQQ__OrderByQuoteLineGroup__c');
        List<SBQQ__Quote__c> quotesActive = quoteQr.getActiveRecords(sale.Id);

        Set<String> quotesWithQuoteLines = new Set<String>();
        for (SBQQ__QuoteLine__c quoteLineActive : quoteLinesActive) {
            quotesWithQuoteLines.add(quoteLineActive.SBQQ__Quote__c);
        }

        List<String> quotesWithoutQuoteLines = new List<String>();

        for (SBQQ__Quote__c quoteActive : quotesActive) {
            if (!quotesWithQuoteLines.contains(quoteActive.Id)) {
                quotesWithoutQuoteLines.add(quoteActive.Name);
            }
        }

        if (!quotesWithoutQuoteLines.isEmpty()) {
            throw new AuraHandledException('Attenzione Non hai configurato i prodotti per le seguenti quote ' + String.join(quotesWithoutQuoteLines, ','));
        }
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @date 02/02/2021
     * @description Check if all QuoteLines have Service Points associated
     * @param Sale__c sale
     */
    public static void checkServicePointAssocs(Sale__c sale){
        quoteLineSrv.checkReadAccess('Name,SBQQ__Product__r.Name,SBQQ__Quote__r.Name,SBQQ__Quote__r.SBQQ__Opportunity2__r.Name,ServicePoint__c,ServicePoint__r.ServicePointCode__c');
        List<SBQQ__QuoteLine__c> quoteLinePods = quoteLineQr.getActiveRecordsBySaleIdAndProductPod(sale.Id);

        List<String> quoteLinePodsWithoutServicePoints = new List<String>();

        for (SBQQ__QuoteLine__c quoteLinePod : quoteLinePods) {
            if (quoteLinePod.ServicePoint__c == null) {
                quoteLinePodsWithoutServicePoints.add(quoteLinePod.Name);
            }
        }

        //part 1 - check if all ql have sp assoc
        if (!quoteLinePodsWithoutServicePoints.isEmpty()) {
            throw new AuraHandledException('Attenzione ai QLI - ' + String.join(quoteLinePodsWithoutServicePoints, ',') + ' non risulta associato nessun service point');
        }

        //part2 - check if quotes have enough sp assoc
        saleServiceItemSrv.checkReadAccess('Opportunity__c,Opportunity__r.Sale__c,Opportunity__r.Name,Opportunity__r.CreatedDate,Quote__c,Quote__r.Name,ServicePoint__c,ServicePoint__r.ServicePointCode__c,ServicePoint__r.RecordType.Name,ServicePoint__r.RecordType.DeveloperName,ServicePoint__r.SupplyCity__c');
        List<SaleServiceItem__c> saleServiceItems = saleServiceItemQr.getActiveRecordsBySaleId(sale.Id);

        system.debug('keltin saleServiceItems: ' + saleServiceItems);
        system.debug('keltin saleServiceItems size: ' + saleServiceItems.size());
        system.debug('keltin quoteLinePods: ' + quoteLinePods);
        system.debug('keltin quoteLinePods size: ' + quoteLinePods.size());

        if (quoteLinePods.size() != saleServiceItems.size()) {
            throw new AuraHandledException('Configurare i prodotti per tutti i Service Point!');
        }

        //part3 - check duplicated service point assoc
        checkDuplicatedServicePointAssocs(quoteLinePods);
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @date 02/02/2021
     * @description Check if Service Points are not associated twice
     * @param List<SBQQ__QuoteLine__c> quoteLinePods
     */
    public static void checkDuplicatedServicePointAssocs(List<SBQQ__QuoteLine__c> quoteLinePods){

        Set<String> encounteredServicePoints = new Set<String>();
        Set<String> duplicateServicePoints = new Set<String>();

        for (SBQQ__QuoteLine__c quoteLinePod : quoteLinePods) {
            if(encounteredServicePoints.contains(quoteLinePod.ServicePoint__r.ServicePointCode__c)){
                duplicateServicePoints.add(quoteLinePod.ServicePoint__r.ServicePointCode__c);
            }else{
                encounteredServicePoints.add(quoteLinePod.ServicePoint__r.ServicePointCode__c);
            }
        }

        List<String> duplicateServicePointsList = new List<String>(duplicateServicePoints);

        if (!duplicateServicePointsList.isEmpty()) {
            throw new AuraHandledException('Attenzione i Punti di fornitura '+String.join(duplicateServicePointsList, ',')+' sonno stati abbinati a più offerte');
        }

    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @date 02/02/2021
     * @description Perform all check validations on next event
     * @param Sale__c sale
     */
    public static void performChecks(Sale__c sale){
        checkQuotesHaveQuoteLines(sale);
        checkServicePointAssocs(sale);
    }

    private static void updateQuotesOnNext(String saleId){
        List<SBQQ__Quote__c> quotes = quoteQr.getActiveRecords(saleId);
        List<SBQQ__Quote__c> quotesToUpdate = new List<SBQQ__Quote__c>();

        for (SBQQ__Quote__c q : quotes) {
            quotesToUpdate.add(
                new SBQQ__Quote__c(
                    Id = q.Id,
                    SBQQ__SubscriptionTerm__c = 1200,
                    SBQQ__StartDate__c = System.today()
                )
            );
        }

        quoteSrv.updateRecords(quotesToUpdate);
    }

    // Create an amendment context
    private with sharing class HDT_WRP_AmendmentContext {
        public Boolean returnOnlyQuoteId;
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @description Amend contract
     * @param String contractId
     * @return (SBQQ__Quote__c) JSON.deserialize(quoteJSON, SBQQ__Quote__c.class)
     */
    @AuraEnabled
    public static SBQQ__Quote__c amendContract(String contractId){

        HDT_WRP_AmendmentContext context = new HDT_WRP_AmendmentContext();
        context.returnOnlyQuoteId = true;
        String contextJson = JSON.serialize(context);
        System.debug('contextJson: ' + contextJson);

        String quoteJson = SBQQ.ServiceRouter.load('SBQQ.ContractManipulationAPI.ContractAmender', contractId, contextJson);
        System.debug('amendContract: ' + quoteJson);
        return (SBQQ__Quote__c) JSON.deserialize(quoteJson, SBQQ__Quote__c.class);
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @description Update Sale on previous (modifica)
     * @param Sale__c sale
     */
    @AuraEnabled
    public static void updateSalePrevious(Sale__c sale){
        saleSrv.updateRecord(sale);
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @description Update Sale on next (avanti)
     * @param Sale__c sale
     */
    @AuraEnabled
    public static void updateSaleNext(Sale__c sale){
        performChecks(sale);
        updateQuotesOnNext(sale.Id);
        saleSrv.updateRecord(sale);
    }

    @AuraEnabled
    public static wrapReturnValidity checkApprovedProduct(Sale__c sale){
        system.debug('sale******************************* '+sale);
        list<String> listId = new List<String>();
        list<String> idToCreateActivity = new List<String>();
        map<String,boolean> checkIsPresent = new Map<string,boolean>();
        wrapReturnValidity resp = new wrapReturnValidity();
        resp.wrapCheck = true;
        resp.responseError = '';
        Boolean hasPermission = FeatureManagement.checkPermission('HDT_CP_SuperUserCPQ');
        Map<String,wrts_prcgvr__Activity__c> orderLineActivity = new Map<String,wrts_prcgvr__Activity__c>();
            List<SBQQ__QuoteLine__c> quoteLinesActive = quoteLineQr.getActiveRecords(sale.Id);
            for(SBQQ__QuoteLine__c line : quoteLinesActive){
                if(line.SBQQ__Product__c != null && line.SBQQ__Product__r.Status__c == 'Scaduta' ){//line.SBQQ__Product__r.EndDate__c < date.today()){
                    listId.add(line.id);
                    checkIsPresent.put(line.id,true);
                }
            }
            if(!listId.isEmpty()){
                List<wrts_prcgvr__Activity__c> listActivity = HDT_QR_ActivityCustom.getRecordByOrderLine(listId);
                System.debug('*****DEBUGActivity:' + listActivity);
                Set<String> quoteToUpdateId = new Set<String>();
                List<SBQQ__Quote__c> quoteToUpdate = new List<SBQQ__Quote__c>();
                for(wrts_prcgvr__Activity__c a : listActivity){
                    orderLineActivity.put(a.QuoteLine__c,a);
                }
                System.debug('*****DEBUGActivity2:' + orderLineActivity);
                for(SBQQ__QuoteLine__c line : quoteLinesActive){
                    if(checkIsPresent.get(line.id)!= null){
                        if(orderLineActivity.get(line.id) != null){
                            System.debug('*****DEBUGActivityDENTROIF:' + line);
                            if(orderLineActivity.get(line.id) != null &&  orderLineActivity.get(line.id).approved__c != 'Si'){
                                resp.responseError += (resp.responseError == '' ? line.sbqq__product__r.Name : ',' + line.sbqq__product__r.Name);
                                resp.wrapCheck = false;
                            }
                        }
                        else{
                            System.debug('*****DEBUGActivityDENTROELSE:' + line);
                            resp.responseError += (resp.responseError == '' ? line.sbqq__product__r.Name : ',' + line.sbqq__product__r.Name);
                            idToCreateActivity.add(line.id);
                            quoteToUpdateId.add(line.sbqq__quote__c);
                            resp.wrapCheck = false;
                        }
                     }
                }
                if(idToCreateActivity != null && !idToCreateActivity.isEmpty()){
                    Id recTypeId= null;
                    RecordType rc= rctype.getRecordType('HDT_RT_AttivitaGestionali', 'wrts_prcgvr__Activity__c');
                    if(rc !=null){
                        recTypeId= rc.Id;
                    }
                    List<wrts_prcgvr__Activity__c> listActivityToCreate = new List<wrts_prcgvr__Activity__c>();
                    for(String s : idToCreateActivity){
                        listActivityToCreate.add(new wrts_prcgvr__Activity__c(QuoteLine__c=s, RecordTypeId= recTypeId, Type__c= 'Approvazione Offerte',Account__c=sale.Account__r.Id,Sale__c=sale.id,Status__c='Creata'));
                    }
                    for(String s : quoteToUpdateId){
                        quoteToUpdate.add(new SBQQ__Quote__C(id=s,SBQQ__Status__c='In Revisione'));
                    }
                    System.debug('listActivityToCreate : ' + listActivityToCreate);
                    actSrv.createRecord(listActivityToCreate);
                    quoteSrv.updateRecords(quoteToUpdate);
                }
            }else{
                return resp;
            }
        
        return resp;
    }
    public class wrapReturnValidity{
        @AuraEnabled public boolean wrapCheck {get;set;} 
        @AuraEnabled public string responseError {get;set;}
    }
}

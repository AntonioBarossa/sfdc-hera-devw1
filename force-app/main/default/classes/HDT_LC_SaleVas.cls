/**
* @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
* @date 19/01/2021
* @description Apex controller for hdtSaleVas.js component
* @history Keltin Mesonjesi – 19/01/2021 – Created class
*/
public inherited sharing class HDT_LC_SaleVas {
    
    private static HDT_QR_Order orderQr = new HDT_QR_Order();
    private static HDT_SRV_Order orderSrv = new HDT_SRV_Order();
    private static HDT_QR_Contract contractQr = new HDT_QR_Contract();
    private static HDT_SRV_Contract contractSrv = new HDT_SRV_Contract();
    private static HDT_SRV_Opportunity opportunitySrv = new HDT_SRV_Opportunity();
    private static HDT_SRV_Quote quoteSrv = new HDT_SRV_Quote();
    private static HDT_QR_Quote quoteQr = new HDT_QR_Quote();
    private static HDT_QR_ServicePoint servicePointQr = new HDT_QR_ServicePoint();
    private static HDT_SRV_ServicePoint servicePointSrv = new HDT_SRV_ServicePoint();

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @description Handles confirm action logic
     * @param String selectedOption
     * @param Order order
     * @param Contract contract
     * @param String supplyCity
     * @param String accountId
     * @param Sale sale
     */
    @AuraEnabled
    public static void confirmAction(String selectedOption, Order order, Contract contract, String supplyCity, String accountId, Sale__c sale){
        switch on selectedOption {
            when  'Ordini in corso'{
                handleActiveOrderConfirm(order, supplyCity, sale);
            }
            when 'Contratti Attivi'{
                handleActiveContractConfirm(contract, supplyCity, sale);
            }
            when 'VAS stand alone'{
                handleVasStandAloneConfirm(supplyCity, accountId, sale);
            }
            
        }
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @description Get list of active orders based on accountId when 'Ordini in corso' is selected
     * @param String accountId
     * @return List<Order>
     */
    @AuraEnabled
    public static List<Order> getOrdersList(String accountId){
        //Orders with status "Draft" or "In Lavorazione"
        orderSrv.checkReadAccess('Name,AccountId,OrderNumber,Status,ServicePoint__c,ServicePoint__r.ServicePointCode__c,SupplyAddress__c');
        return orderQr.getRecordsForVasSelection(accountId);
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @description Get list of active contracts based on accountId when 'Contratti Attivi' is selected
     * @param String accountId
     * @return List<Contact>
     */
    @AuraEnabled
    public static List<Contract> getContractsList(String accountId){
        //Contracts with status "Activated"
        contractSrv.checkReadAccess('Name,AccountId,ContractNumber,Status');
        return contractQr.getActiveRecordsByAccountId(accountId);
    }


    /**
     * @author Federico de Felice (federico.defelice@webresults.it)
     * @description Get list of active contracts based on accountId when 'Contratti Attivi' is selected
     * @param String accountId
     * @return List<Contact>
     */
    @AuraEnabled
    public static List<Contract> getTempNuovaAttivazContracts(String accountId){
        //Contracts with status "Activated"
        contractSrv.checkReadAccess('Name,AccountId,ContractNumber,Status');
        return contractQr.getTempNewActivationContractsByAccountId(accountId);
    }

    /**
    * @description Getting list of Orders/Assets/Subscription
    * @author gabriele.rota@webresults.it | 2021-07-21 
    * @param accountId 
    * @param key 
    * @return List<SObject> 
    **/
    @AuraEnabled
    public static List<SObject> getFornitura(Id accountId, String key){
        List<SObject> records;

        switch on key {
            when 'ORDERS_IN_PROGRESS_VAS'{
                records = [SELECT Type, OrderNumber, ProcessType__c, ServicePoint__r.ServicePointCode__c, ServicePoint__r.SupplyAddress__c
                    FROM Order
                    WHERE RecordType.DeveloperName='HDT_RT_VAS' AND Status='In Lavorazione' AND SBQQ__Quote__r.IsVAS__c = true
                    AND SBQQ__Quote__r.AmendmentAllowed__c != true AND AccountId=:accountId WITH SECURITY_ENFORCED];
            }
            when 'ORDERS_ELE'{
                records = [SELECT Type, OrderNumber, ProcessType__c, ServicePoint__r.ServicePointCode__c, ServicePoint__r.SupplyAddress__c
                    FROM Order
                    WHERE CommodityFormula__c='Energia Elettrica' AND AccountId=:accountId WITH SECURITY_ENFORCED];
            }
            when 'ASSETS_ACTIVATED'{
                records = [SELECT Name, SerialNumber, InstallDate, Contact.Name, Product2.Name
                    FROM Asset WHERE DigitalAssetStatus='Attivo' AND AccountId=:accountId WITH SECURITY_ENFORCED];
            }
            when 'SUBS_ANALISI_CONSUMI'{ 
                records = [SELECT SBQQ__Contract__r.ContractNumber,
                    SBQQ__Contract__r.ServicePoint__r.ServicePointCode__c, SBQQ__Contract__r.ServicePoint__r.SupplyAddress__c
                    FROM SBQQ__Subscription__c WHERE SBQQ__ProductName__c='Analisi Consumi' AND SBQQ__Account__c=:accountId WITH SECURITY_ENFORCED];
            }
            when 'CONTRACT_ELE_ACTIVE'{
                records = [SELECT ContractNumber, ServicePoint__r.ServicePointCode__c, ServicePoint__r.SupplyAddress__c
                    FROM Contract WHERE Status IN ('Attivo','Activated') AND AccountId=:accountId WITH SECURITY_ENFORCED];
                    //Chiedere per Energia Elettrica
            }
        }
        return records;
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @description Get map with lists of active contracts and orders
     * @param String accountId
     * @return Map<String,List<SObject>>
     */
    @AuraEnabled
    public static Map<String,List<SObject>> getContractsAndOrdersMap(String accountId){

        Map<String,List<SObject>> mapOfLists = new Map<String,List<SObject>>();
        
        List<Contract> contractsList = new List<Contract>();
        contractsList = getContractsList(accountId);
        mapOfLists.put('contractsList', contractsList);

        List<Order> ordersList = new List<Order>();
        ordersList = getOrdersList(accountId);
        mapOfLists.put('ordersList', ordersList);

        return mapOfLists;
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @description Check for duplicated contract/order reference in current sale
     * @param String saleId
     * @param String objectId (OrderReference__c/ContractReference__c)
     * @param String type (contract or order)
     */
    private static Boolean isDuplicated(String saleId, String objectId, String type) {
        Boolean result = false;

        List<SBQQ__Quote__c> resultsList = new List<SBQQ__Quote__c>();

        switch on type {
            when 'contract' {
                resultsList = quoteQr.getQuotesBySaleAndContractReference(saleId, objectId);
            }
            when 'order' {
                resultsList = quoteQr.getQuotesBySaleAndOrderReference(saleId, objectId);
            }
        }

        return !resultsList.isEmpty();
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @description Handles confirm action for 'Ordini in corso'
     * @param Order order
     * @param String supplyCity
     */
    public static void handleActiveOrderConfirm(Order order, String supplyCity, Sale__c sale){
        
        if (order.Id == null) {
            throw new AuraHandledException('Devi scegliere un ordine!');
        }

        if (isDuplicated(sale.Id, order.Id, 'order')) {
            throw new AuraHandledException('La quote con il riferimento di questo ordine esiste già!');
        }

        Opportunity newOpportunity = opportunitySrv.createRecord(new Opportunity(
            Sale__c = sale.Id,
            Name = opportunitySrv.generateName(sale) + ' VAS',
            CloseDate = Date.today().addDays(30),
            StageName = 'Proposal',
            AccountId = order.AccountId
        ));

        SBQQ__Quote__c newQuote = quoteSrv.createRecord(new SBQQ__Quote__c(
            Sale__c = sale.Id,
            OrderReference__c = order.Id,
            SBQQ__Opportunity2__c = newOpportunity.Id,
            SBQQ__Account__c = sale.Account__c,
            SBQQ__Primary__c = true,
            Agency__c = sale.Agency__c,
            Market__c = sale.Market__c,
            Channel__c = sale.Channel__c,
            FriendCode__c = sale.FriendCode__c,
            CampaignCode__c = sale.CampaignCode__c,
            CreatedBy__c = sale.CreatedBy__c,
            SupplyCity__c = null, //to do (other logic to get SupplyCity)
            SalesCompany__c = sale.SalesCompany__c,
            Campaign__c = sale.Campaign__c,
            IsVAS__c = true,
            SBQQ__PricebookId__c = checkCommodityOrder(order.Id) == 'HDT_RT_Ele' ? getPricebookId('VAS ELE') : getPricebookId('VAS GAS')
        ));

        newOpportunity.SBQQ__PrimaryQuote__c = newQuote.Id;

        opportunitySrv.updateRecord(newOpportunity);
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @description Handles confirm action for 'Contratti Attivi'
     * @param Contract contract
     * @param String supplyCity
     */
    public static void handleActiveContractConfirm(Contract contract, String supplyCity, Sale__c sale){
        
        if (contract.Id == null) {
            throw new AuraHandledException('Devi scegliere un contrato!');
        }

        if (isDuplicated(sale.Id, contract.Id, 'contract')) {
            throw new AuraHandledException('La quote con il riferimento di questo contrato esiste già!');
        }

        Opportunity newOpportunity = opportunitySrv.createRecord(new Opportunity(
            Sale__c = sale.Id,
            Name = opportunitySrv.generateName(sale) + ' VAS',
            CloseDate = Date.today().addDays(30),
            StageName = 'Proposal',
            AccountId = contract.AccountId
        ));

        SBQQ__Quote__c newQuote = quoteSrv.createRecord(new SBQQ__Quote__c(
            Sale__c = sale.Id,
            ContractReference__c = contract.Id,
            SBQQ__Opportunity2__c = newOpportunity.Id,
            SBQQ__Account__c = sale.Account__c,
            SBQQ__Primary__c = true,
            Agency__c = sale.Agency__c,
            Market__c = sale.Market__c,
            Channel__c = sale.Channel__c,
            FriendCode__c = sale.FriendCode__c,
            CampaignCode__c = sale.CampaignCode__c,
            CreatedBy__c = sale.CreatedBy__c,
            SalesCompany__c = sale.SalesCompany__c,
            Campaign__c = sale.Campaign__c,
            SupplyCity__c = null, //to do (other logic to get supplyCity)
            IsVAS__c = true,
            SBQQ__PricebookId__c = checkCommodityContract(contract.Id) == 'HDT_RT_Ele' ? getPricebookId('VAS ELE') : getPricebookId('VAS GAS')
        ));

        newOpportunity.SBQQ__PrimaryQuote__c = newQuote.Id;

        opportunitySrv.updateRecord(newOpportunity);
    }

    /**
     * @author Keltin Mesonjesi (keltin.mesonjesi@dunegroup.it)
     * @description Handles confirm action for "VAS Stand Alone" option
     * @param String supplyCity
     * @param String accountId
     */
    public static void handleVasStandAloneConfirm(String supplyCity, String accountId, Sale__c sale){
        
        if (supplyCity == '') {
            throw new AuraHandledException('Devi compilare il comune!');
        }

        Opportunity newOpportunity = opportunitySrv.createRecord(new Opportunity(
            Sale__c = sale.Id,
            Name = opportunitySrv.generateName(sale) + ' VAS',
            CloseDate = Date.today().addDays(30),
            StageName = 'Proposal',
            AccountId = accountId
        ));

        SBQQ__Quote__c newQuote = quoteSrv.createRecord(new SBQQ__Quote__c(
            Sale__c = sale.Id,
            SBQQ__Opportunity2__c = newOpportunity.Id,
            SBQQ__Account__c = accountId,
            SBQQ__Primary__c = true,
            SupplyCity__c = supplyCity,
            Agency__c = sale.Agency__c,
            Market__c = sale.Market__c,
            Channel__c = sale.Channel__c,
            FriendCode__c = sale.FriendCode__c,
            CampaignCode__c = sale.CampaignCode__c,
            CreatedBy__c = sale.CreatedBy__c,
            SalesCompany__c = sale.SalesCompany__c,
            IsVAS__c = true,
            SBQQ__PricebookId__c = getPricebookId('VAS Standalone')
        ));

        newOpportunity.SBQQ__PrimaryQuote__c = newQuote.Id;

        opportunitySrv.updateRecord(newOpportunity);
    }

    private static String getPricebookId(String pricebookName) {
        List<Pricebook2> pricebook = HDT_QR_PriceBook.getRecordByName(pricebookName);

        String result = '';

        if(!pricebook.isEmpty()) {
            result = pricebook[0].Id;
        } else {
            result = null;
        }

        return result;
    }

    private static String checkCommodityContract(String contractId) {

        List<Contract> contracts = contractQr.getRecordById(contractId);

        return contracts[0].ServicePoint__r.RecordType.DeveloperName;

    }

    private static String checkCommodityOrder(String orderId) {

        Order order = orderQr.getRecordById(orderId);

        return order.ServicePoint__r.RecordType.DeveloperName;

    }
}
public with sharing class HDT_SRV_EmailMessage {
    
    //DEBUG
    public static final String CLASS_NAME = 'HDT_SRV_EmailMessage';

    public HDT_SRV_EmailMessage() {

    }
    
    public static void insertEmailMessage(EmailMessage m){
        HDT_UTL_DatabaseService.insertSObject(m);
    }


    public static void checkEmailSender(List<EmailMessage> emailList){
        
		//DEBUG
		String debugString = CLASS_NAME + ' - checkEmailSender';
		System.debug(debugString + ' - emailList size: ' + emailList.size());
        
        Map<SObject,Id> mapEmailCase = new Map<SObject,Id>();
        String userEmail = UserInfo.getUserEmail();
        Id parentId;
        String objectName = '';
        for(EmailMessage email : emailList){
            String fromAddress = email.FromAddress;
            if (fromAddress != null && fromAddress.equals(userEmail)) {
                email.addError('Non Ã¨ possibile inviare la comunicazione utilizzando la propria Email personale come mittente. Selezionare un mittente alternativo.');
            }
            parentId = email.parentId;
            if(parentId != null){
                objectName = parentId.getSobjectType().getDescribe().getName();
            }else {
                objectName = '';
            }
            if(String.isNotBlank(objectName)){
                switch on objectName{

                    when 'Case'{
                        mapEmailCase.put(email, parentId);
                    }
                    when else{
                        //no other cases yet
                    }
                }
            }    
        }
        if(mapEmailCase.size()>0){
            manageEmailCase(mapEmailCase);
        }
    }


    public static void checkIncomingEmails(List<EmailMessage> emailList){
        
		//DEBUG
		String debugString = CLASS_NAME + ' - checkIncomingEmails';
		System.debug(debugString + ' - emailList size: ' + emailList.size());
        
        Map<SObject,Id> mapEmailCase = new Map<SObject,Id>();
        Id parentId;
        String objectName='';
        for(EmailMessage email : emailList){
            parentId = email.parentId;
            if(parentId != null){
                objectName = parentId.getSObjectType().getDescribe().getName();
            }else {
                objectName = '';
            }
            if(String.isNotBlank(objectName)){
                switch on  objectName {
                    when 'Case' {
                        mapEmailCase.put(email, parentId);
                    }
                    when else {
                        //no other case yet
                    }
                }
            }
        }
        if(mapEmailCase.size()>0){
            manageEmailCase(mapEmailCase);
        }
    }
    
    //params: mappa EmailMessage ---> Parent Id (Case)
    private static void manageEmailCase(Map<SObject, Id> params){
        
		//DEBUG
		String debugString = CLASS_NAME + ' - manageEmailCase';
		System.debug(debugString + ' - params size: ' + params.size());
        
        HDT_QR_Case caseQr = new HDT_QR_Case();
        Map<Id,Case> mapIdCase = new Map<Id,Case>();
        List<Case> caseToUpdate = new List<Case>();
        Case parentRecord = new Case();
        
        List<Id> caseIdList = params.values();
        String idString = String.join( new List<Id>(caseIdList) , '\',\'');
        String queryString = 'SELECT Id, ParentId, Type, RecordType.DeveloperName,Phase__c FROM Case WHERE Id in (\''+ idString +'\')';
        List<SObject> recordList = HDT_QR_GenericQuery.getGenericRecords(queryString, 'Case');
        List<Case> caseList = (List<Case>) recordList;
        
        try{
            parentRecord = caseQr.getParentCaseById(caseList[0].ParentId);
            System.debug(debugString + ' - ###Found Records --> ' + parentRecord);
        } catch (Exception e) {
            System.debug(debugString + e.getMessage());
        }
        
        for(Case single : (List<Case>)recordList){
            mapIdCase.put(single.Id, single);
        }
        
        //TODO: OPPORTUNO CAMBIARE DA "==" A METODO .EQUALS() DI STRING.
        for (SObject emailObj : params.keySet()) {
            EmailMessage email = (EmailMessage) emailObj;
            
            if(email.Incoming){
                Case caseRecord = mapIdCase.get(email.ParentId);
                System.debug(debugString + ' - case type: ' + caseRecord.Type);
                
                if(caseRecord.Type == 'Comunicazione di Fallimento'
                || caseRecord.Type == 'Dichiarazione di intento'
                || caseRecord.Type == 'Richiesta Parere'){
                        caseRecord.Phase__c = 'Risposta Ricevuta';
                        //Gestione avanzamento ParentCase di Reclamo
                        if(caseRecord.Type == 'Richiesta Parere'){
                            System.debug(debugString + ' - ### Inside Parere Condition ###');
                            caseRecord.Phase__c = 'Completata';
                            if(parentRecord != null){
                                System.debug(debugString + ' - ### Inside Parent Condition ###');
                                parentRecord.Phase__c = 'Risposta Parere Ricevuta';
                                caseToUpdate.add(parentRecord);
                            }
                        }
                }
                System.debug(debugString + ' - ### Case To Update --> ' + caseToUpdate);
                caseToUpdate.add(caseRecord);
                
            } else {
                Case caseRecord = mapIdCase.get(email.ParentId);
                System.debug(debugString + ' - case type: ' + caseRecord.Type);
                
                if(caseRecord.Type == 'Comunicazione di Fallimento'
                || caseRecord.Type == 'Dichiarazione di intento'
                || caseRecord.Type == 'Richiesta Parere'){
                    if(caseRecord.type == 'Richiesta Parere'){
                        caseRecord.Phase__c = 'In attesa risposta parere';
                    } else {
                        caseRecord.Phase__c = 'In attesa risposta Mail';
                    }
                }
                System.debug(debugString + ' - ### Case To Update --> ' + caseToUpdate);
                caseToUpdate.add(caseRecord);
            }
        }
        
        if(caseToUpdate.size()>0){
            Boolean result = HDT_UTL_DatabaseService.updateSObject(caseToUpdate);
        }
    }
    
}
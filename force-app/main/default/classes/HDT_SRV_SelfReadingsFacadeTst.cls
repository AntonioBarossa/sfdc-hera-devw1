@isTest
public with sharing class HDT_SRV_SelfReadingsFacadeTst {
    
    //DEBUG
    public static final String TEST_NAME = 'HDT_SRV_SelfReadingsFacadeTst';
    
    //DATA
    private static HDT_UTL_Constants constants = new HDT_UTL_Constants();
    private static Boolean processError1 = false;
    private static Boolean processError2 = false;
    private static String myCommodity = 'Gas';
    private static Boolean isMeterCorrector = true;
    
    
    //TODO: RICORDARSI DI TESTARE LE selfReadings AL COMPLETO.
    
    
    
    //TEST SETUP
    private static void mySetup(){
        
        List<Account> acc = HDT_UTL_DataFactoryTst.createAccountBusiness(1, true, 'HERA COMM', 'Azienda', 'Aziende SME');
        List<BillingProfile__c> bpf = HDT_UTL_DataFactoryTst.createBillingProfile(1, true, acc[0].Id);
        List<Order> ordList = HDT_UTL_DataFactoryTst.createOrder(1, true, acc[0].Id, 'Bozza');
        List<Contact> contactList = HDT_UTL_DataFactoryTst.createContact(1, true, acc[0].Id);
        
        ServicePoint__c servPoint;
        servPoint = HDT_UTL_DataFactoryTst.createServicePoint(1, false)[0];
        servPoint.CommoditySector__c = myCommodity;
        insert servPoint;
        
        List<Contract> contractList = HDT_UTL_DataFactoryTst.createContract(1, true, acc[0].id);
        List<Case> caseList = HDT_UTL_DataFactoryTst.createCaseAutolettura(1, true, acc[0].id, contactList[0].Id, servPoint.Id, contractList[0].id, ordList[0].id);
        
        //READING
        if(isMeterCorrector){
            List<Reading__c> readings = HDT_UTL_DataFactoryTst.createReadingMeterCorrector(1, true, caseList[0].Id);
        } else {
            List<Reading__c> readings = HDT_UTL_DataFactoryTst.createReading(1, true, caseList[0].Id);
        }
        
        HDT_UTL_DataFactoryTst.pClickCasePhase();
    }
    
    
    //TESTS
    
    //TODO: IMPLEMENTARE ANCHE CASI CON RESPONSE CODE DIVERSO DA 200 E 201
    
    //execute
    ///CheckAutolettura - GAS
    @isTest
    private static void executeTest_CheckAutolettura() {
        
		//DEBUG
		String debugString = TEST_NAME + ' - executeTest_CheckAutolettura';
		System.debug(debugString);
        
        //SETUP
        mySetup();
        
        //PREPARAZIONE ARGS
        Case myCase = [SELECT Id FROM Case];
        
        Map<String,String> parameters = new Map<String,String>();
        parameters.put('requestType', 'CheckAutolettura');
        
        
        Map<String,Object> argsMap = new Map<String,Object>();
        argsMap.put('method', '');//NB: PARAMETRO NON UTILIZZATO IN CODICE
        argsMap.put('sender', myCase);
        argsMap.put('parameters', parameters);
        
        
        //WEBSERVICE MOCK
        Test.setMock(HttpCalloutMock.class, new myWebServiceMock());
        
        //PHASE ENABLE
        String rtName = constants.CASE_RECORDTYPE_DEVELOPERNAME_AUTOLETTURA;
        String rtId = constants.CASE_RECORDTYPEID_AUTOLETTURA;
        HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'Check preliminari OK', 'Bozza', rtId, rtName,'A','','','');
        //HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'Inviata a SAP', 'Check preliminari OK', rtId, rtName,'A','','','');
        
        //TESTING
        Test.startTest();
        
        HDT_SRV_SelfReadingsFacade objToTest = new HDT_SRV_SelfReadingsFacade();
        wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse result;
        result = (wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse) objToTest.execute(argsMap);
        
        Test.stopTest();
        
        //RETRIEVING DATA
        Case myUpdatedCase = [SELECT Id, Phase__c FROM Case];
        
        //ASSERTS
        System.assertEquals('Check preliminari OK', myUpdatedCase.Phase__c);
        
    }
    
    
    ///CheckAutolettura - NON GAS
    @isTest
    private static void executeTest_CheckAutolettura_NG() {
        
		//DEBUG
		String debugString = TEST_NAME + ' - executeTest_CheckAutolettura_NG';
		System.debug(debugString);
        
        //SETUP
        myCommodity = 'Teleriscaldamento';
        isMeterCorrector = false;
        mySetup();
        
        //PREPARAZIONE ARGS
        Case myCase = [SELECT Id FROM Case];
        
        Map<String,String> parameters = new Map<String,String>();
        parameters.put('requestType', 'CheckAutolettura');
        
        
        Map<String,Object> argsMap = new Map<String,Object>();
        argsMap.put('method', '');//NB: PARAMETRO NON UTILIZZATO IN CODICE
        argsMap.put('sender', myCase);
        argsMap.put('parameters', parameters);
        
        
        //WEBSERVICE MOCK
        Test.setMock(HttpCalloutMock.class, new myWebServiceMock());
        
        //PHASE ENABLE
        String rtName = constants.CASE_RECORDTYPE_DEVELOPERNAME_AUTOLETTURA;
        String rtId = constants.CASE_RECORDTYPEID_AUTOLETTURA;
        HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'Check preliminari OK', 'Bozza', rtId, rtName,'A','','','');
        //HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'Inviata a SAP', 'Check preliminari OK', rtId, rtName,'A','','','');
        
        //TESTING
        Test.startTest();
        
        HDT_SRV_SelfReadingsFacade objToTest = new HDT_SRV_SelfReadingsFacade();
        wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse result;
        result = (wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse) objToTest.execute(argsMap);
        
        Test.stopTest();
        
        //RETRIEVING DATA
        Case myUpdatedCase = [SELECT Id, Phase__c FROM Case];
        
        //ASSERTS
        System.assertEquals('Check preliminari OK', myUpdatedCase.Phase__c);
        
    }
    
    
    
    
    
    
    
    ///InvioLettureForzato - GAS
    @isTest
    private static void executeTest_InvioLettureForzato_NG() {
        
		//DEBUG
		String debugString = TEST_NAME + ' - executeTest_InvioLettureForzato_NG';
		System.debug(debugString);
        
        //SETUP
        mySetup();
        
        //PREPARAZIONE ARGS
        Case myCase = [SELECT Id FROM Case];
        
        Map<String,String> parameters = new Map<String,String>();
        parameters.put('requestType', 'InvioLettureForzato');//TODO: IMPLEMENTARE CASI ALTERNATIVI
        
        
        Map<String,Object> argsMap = new Map<String,Object>();
        argsMap.put('method', '');//NB: PARAMETRO NON UTILIZZATO IN CODICE
        argsMap.put('sender', myCase);
        argsMap.put('parameters', parameters);
        
        
        //WEBSERVICE MOCK
        Test.setMock(HttpCalloutMock.class, new myWebServiceMock());
        
        //PHASE ENABLE
        String rtName = constants.CASE_RECORDTYPE_DEVELOPERNAME_AUTOLETTURA;
        String rtId = constants.CASE_RECORDTYPEID_AUTOLETTURA;
        HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'Inviata a SAP', 'Bozza', rtId, rtName,'A','','','');
        
        //TESTING
        Test.startTest();
        
        HDT_SRV_SelfReadingsFacade objToTest = new HDT_SRV_SelfReadingsFacade();
        wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse result;
        result = (wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse) objToTest.execute(argsMap);
        
        Test.stopTest();
        
        //RETRIEVING DATA
        Case myUpdatedCase = [SELECT Id, Phase__c FROM Case];
        
        //ASSERTS
        System.assertEquals('Inviata a SAP', myUpdatedCase.Phase__c);
        
    }
    
    
    ///InvioLettureForzato - NON GAS
    @isTest
    private static void executeTest_InvioLettureForzato() {
        
		//DEBUG
		String debugString = TEST_NAME + ' - executeTest_InvioLettureForzato';
		System.debug(debugString);
        
        //SETUP
        myCommodity = 'Teleriscaldamento';
        isMeterCorrector = false;
        mySetup();
        
        //PREPARAZIONE ARGS
        Case myCase = [SELECT Id FROM Case];
        
        Map<String,String> parameters = new Map<String,String>();
        parameters.put('requestType', 'InvioLettureForzato');//TODO: IMPLEMENTARE CASI ALTERNATIVI
        
        
        Map<String,Object> argsMap = new Map<String,Object>();
        argsMap.put('method', '');//NB: PARAMETRO NON UTILIZZATO IN CODICE
        argsMap.put('sender', myCase);
        argsMap.put('parameters', parameters);
        
        
        //WEBSERVICE MOCK
        Test.setMock(HttpCalloutMock.class, new myWebServiceMock());
        
        //PHASE ENABLE
        String rtName = constants.CASE_RECORDTYPE_DEVELOPERNAME_AUTOLETTURA;
        String rtId = constants.CASE_RECORDTYPEID_AUTOLETTURA;
        HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'Inviata a SAP', 'Bozza', rtId, rtName,'A','','','');
        
        //TESTING
        Test.startTest();
        
        HDT_SRV_SelfReadingsFacade objToTest = new HDT_SRV_SelfReadingsFacade();
        wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse result;
        result = (wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse) objToTest.execute(argsMap);
        
        Test.stopTest();
        
        //RETRIEVING DATA
        Case myUpdatedCase = [SELECT Id, Phase__c FROM Case];
        
        //ASSERTS
        System.assertEquals('Inviata a SAP', myUpdatedCase.Phase__c);
        
    }
    
    
    
    
    ///Eccezione intenzionale - Causata con submitRequest
    @isTest
    private static void executeTest_Exception() {
        
		//DEBUG
		String debugString = TEST_NAME + ' - executeTest_Exception';
		System.debug(debugString);
        
        //SETUP
        processError1 = true;
        mySetup();
        
        //PREPARAZIONE ARGS
        Case myCase = [SELECT Id FROM Case];
        
        Map<String,String> parameters = new Map<String,String>();
        parameters.put('requestType', 'CheckAutolettura');
        
        
        Map<String,Object> argsMap = new Map<String,Object>();
        argsMap.put('method', '');//NB: PARAMETRO NON UTILIZZATO IN CODICE
        argsMap.put('sender', myCase);
        argsMap.put('parameters', parameters);
        
        
        //WEBSERVICE MOCK
        Test.setMock(HttpCalloutMock.class, new myWebServiceMock());
        
        //PHASE ENABLE
        String rtName = constants.CASE_RECORDTYPE_DEVELOPERNAME_AUTOLETTURA;
        String rtId = constants.CASE_RECORDTYPEID_AUTOLETTURA;
        HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'Inviata a SAP', 'Bozza', rtId, rtName,'A','','','');
        
        //TESTING
        Boolean caught = false;
        
        HDT_SRV_SelfReadingsFacade objToTest = new HDT_SRV_SelfReadingsFacade();
        wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse result;
        result = (wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse) objToTest.execute(argsMap);
        
        //ASSERTS
        System.assert(!result.success);
        System.assertEquals('KO', result.message);
        
    }
    
    
    //generateJson - Null
    @isTest
    private static void generateJsonTest() {
        
		//DEBUG
		String debugString = TEST_NAME + ' - generateJsonTest';
		System.debug(debugString);
        
        //SETUP
        HDT_WRP_GenericSapIntegration inputParams = new HDT_WRP_GenericSapIntegration();
        inputParams.requestType = 'Fake';
        
        //TESTING
        HDT_WRP_GenericSapIntegration result = HDT_SRV_SelfReadings.generateJson(inputParams);
        
        //ASSERTS
        System.assertEquals(null, result);
        
    }
    
    //generateJsonCheckAutolettura
    @isTest
    private static void generateJsonCheckAutoletturaTest() {
        
		//DEBUG
		String debugString = TEST_NAME + ' - generateJsonCheckAutoletturaTest';
		System.debug(debugString);
        
        //SETUP
        HDT_WRP_GenericSapIntegration inputParams;
        
        //TESTING
        HDT_WRP_GenericSapIntegration result = HDT_SRV_SelfReadings.generateJsonCheckAutolettura(inputParams);
        
        //ASSERTS
        System.assertEquals(null, result);
        
        
        //TESTING - NO CASES
        inputParams = new HDT_WRP_GenericSapIntegration();
        inputParams.recordId = '';
        result = HDT_SRV_SelfReadings.generateJsonCheckAutolettura(inputParams);
        
        //ASSERTS
        System.assertEquals(null, result);
        
    }
    
    
    //generateJsonInvioLetture
    @isTest
    private static void generateJsonInvioLettureTest() {
        
		//DEBUG
		String debugString = TEST_NAME + ' - generateJsonInvioLettureTest';
		System.debug(debugString);
        
        //SETUP
        HDT_WRP_GenericSapIntegration inputParams;
        
        //TESTING
        HDT_WRP_GenericSapIntegration result = HDT_SRV_SelfReadings.generateJsonInvioLetture(inputParams);
        
        //ASSERTS
        System.assertEquals(null, result);
        
        
        //TESTING - NO CASES
        inputParams = new HDT_WRP_GenericSapIntegration();
        inputParams.recordId = '';
        result = HDT_SRV_SelfReadings.generateJsonInvioLetture(inputParams);
        
        //ASSERTS
        System.assertEquals(null, result);
        
    }
    
    
    //handleResponse
    @isTest
    private static void handleResponseTest() {
        
		//DEBUG
		String debugString = TEST_NAME + ' - handleResponseTest';
		System.debug(debugString);
        
        //SETUP
        HDT_WRP_GenericSapIntegration sapIntegration = new HDT_WRP_GenericSapIntegration();
        sapIntegration.requestType = '';
        
        //TESTING
        HDT_SRV_SelfReadings.HDT_WRP_SelfReadingResponse result = HDT_SRV_SelfReadings.handleResponse(sapIntegration, '');
        
        //ASSERTS
        System.assertEquals(null, result);
        
    }
    
    //NB: trattasi sempre di test del metodo execute della Facade.
    //handleResponseCheckAutolettura - RESPONSE CODE NOT 200 OR 201
    @isTest
    private static void handleResponseCheckAutolettura_NOT200() {
        
		//DEBUG
		String debugString = TEST_NAME + ' - handleResponseCheckAutolettura_NOT200';
		System.debug(debugString);
        
        //SETUP
        processError2 = true;
        mySetup();
        
        //PREPARAZIONE ARGS
        Case myCase = [SELECT Id FROM Case];
        
        Map<String,String> parameters = new Map<String,String>();
        parameters.put('requestType', 'CheckAutolettura');
        
        
        Map<String,Object> argsMap = new Map<String,Object>();
        argsMap.put('method', '');//NB: PARAMETRO NON UTILIZZATO IN CODICE
        argsMap.put('sender', myCase);
        argsMap.put('parameters', parameters);
        
        
        //WEBSERVICE MOCK
        Test.setMock(HttpCalloutMock.class, new myWebServiceMock());
        
        //PHASE ENABLE
        String rtName = constants.CASE_RECORDTYPE_DEVELOPERNAME_AUTOLETTURA;
        String rtId = constants.CASE_RECORDTYPEID_AUTOLETTURA;
        HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'Check preliminari OK', 'Bozza', rtId, rtName,'A','','','');
        //HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'Inviata a SAP', 'Check preliminari OK', rtId, rtName,'A','','','');
        
        //TESTING
        Test.startTest();
        
        HDT_SRV_SelfReadingsFacade objToTest = new HDT_SRV_SelfReadingsFacade();
        wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse result;
        result = (wrts_prcgvr.ApexActionIntegration_1_0.CalloutResponse) objToTest.execute(argsMap);
        
        Test.stopTest();
        
        //RETRIEVING DATA
        Case myUpdatedCase = [SELECT Id, TecnicalPhase__c FROM Case];
        
        //ASSERTS
        System.assertEquals('Check preliminari KO', myUpdatedCase.TecnicalPhase__c);
        
    }
    
    
    //handleResponseInvioLetture - RESPONSE CODE NOT 200 OR 201
    //NB: POTENZIALMENTE SUPERFLUO
    
    //handleResponseInvioLettureForzato - RESPONSE CODE NOT 200 OR 201
    //NB: POTENZIALMENTE SUPERFLUO
    
    
    
    //WEBSERVICE MOCKS
    
    public class myWebServiceMock implements HTTPCalloutMock{
        
        public HTTPResponse respond(HTTPRequest request){
            
            //DEBUG
            System.debug('myWebServiceMock - respond');
            HttpResponse response = new HttpResponse();
            
            if(processError1){
                throw new AuraHandledException('Fake Exception for Tests - Exception 1');
            }
            
            //CheckAutolettura
            if(request.getEndpoint().equalsIgnoreCase('Callout:SelfReadingsCheck')){
                
                //DEBUG
                System.debug('myWebServiceMock - SelfReadingsCheck');
                
                if(processError2){
                    System.debug('myWebServiceMock - Introduzione errore manuale');
                    //PREPARING RESPONSE
                    Map<String, Object> myResponseMap = new Map<String, Object>();
                    myResponseMap.put('message', 'Error Message');
                    
                    List<Object> errorDetails = new List<Object>{myResponseMap};
                    
                    Map<String, Object> body = new Map<String, Object>();
                    body.put('errorDetails', errorDetails);
                    
                    //HTTP RESPONSE
                    response.setHeader('Content-Type', 'application/json');
                    response.setBody(JSON.serialize(body));
                    response.setStatusCode(400);
                    response.setStatus('OK');
                    
                } else {
                    System.debug('myWebServiceMock - Processo normale');
                    //PREPARING RESPONSE
                    Map<String, Object> data = new Map<String, Object>();
                    data.put('message', 'data fuori finestra acquisibile');
                    
                    Map<String, Object> body = new Map<String, Object>();
                    body.put('data', data);
                    
                    //HTTP RESPONSE
                    response.setHeader('Content-Type', 'application/json');
                    response.setBody(JSON.serialize(body));
                    response.setStatusCode(200);
                    response.setStatus('OK');
                    
                }
                
            } else if(request.getEndpoint().equalsIgnoreCase('Callout:SendReadings')){
                
                //DEBUG
                System.debug('myWebServiceMock - SendReadings');
                
                //PREPARING RESPONSE
                Map<String, Object> body = new Map<String, Object>();//EMPTY BODY PER CODE 200 o 201
                
                //HTTP RESPONSE
                response.setHeader('Content-Type', 'application/json');
                response.setBody(JSON.serialize(body));
                response.setStatusCode(200);
                response.setStatus('OK');
                
            }
            
            return response;
        }
    }
    
    
}

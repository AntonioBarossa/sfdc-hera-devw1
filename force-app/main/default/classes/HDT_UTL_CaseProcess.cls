@SuppressWarnings('PMD.AvoidDebugStatements')
public with sharing class HDT_UTL_CaseProcess {
    private static HDT_QR_Contact contactQr = new HDT_QR_Contact();
    private static HDT_QR_Account accountQr = new HDT_QR_Account();
    private static HDT_UTL_CommunicationLog commUtl = new HDT_UTL_CommunicationLog();
    private static HDT_SRV_CommunicationLog commSrv = new HDT_SRV_CommunicationLog();
    private static HDT_SRV_Account accountSrv = new HDT_SRV_Account();
    private static HDT_QR_CampaignMember campaignMemberQr = new HDT_QR_CampaignMember();
    private static HDT_SRV_CampaignMember campaignMemberSrv = new HDT_SRV_CampaignMember();
    private static String childOpinionCanc = '[REC-0001] Annullato per annullamento case padre';

    public static void checkSatisfationIndex(Map<Id,SObject> newMap, Map<Id,SObject> oldMap) {
        List<Account> accountsToUpdate = new List<Account>();
        for(Case newCase : (List<Case>) newMap.values()) {
            if(((Case) oldMap.get(newCase.Id)).PraxidiaOverrallSatisfaction__c != newCase.PraxidiaOverrallSatisfaction__c) {
                accountsToUpdate.add(new Account(
                    Id = newCase.AccountId,
                    SatisfactionIndexCtrl__c = newCase.PraxidiaOverrallSatisfaction__c,
                    PraxidiaUpdateDate__c = newCase.PraxidiaDateOutcome__c  
                ));
            } 
        }
        accountSrv.updateRecordsWithCheck(accountsToUpdate);
        //update accountsToUpdate; 
    }
    public static void predefaultCaseValues(List<Case> caseList, Map<Id,SObject> caseOldMap){
        //variable allocation
        String servicePoint = '';
        String servicePointOld = '';
        String commodity = '';
        Boolean enableSearch = false;
        Map<Id,String> spCommodityMap = new Map<Id,String>();
        List<Id> spIds = new List<Id>();
        Map<Id,Boolean> needUpdate = new Map<Id,Boolean>();
        Set<Id> accountIdSet = new Set<Id>();
        String accountId;
        String oldAccountId;
        Map<Id,Account> mapIdAccount = new Map<Id,Account>();
        //First check if is from Insert or Update
        //1. Is From insert
        if(caseList != null && !caseList.isEmpty() && caseOldMap == null){
            //Commodity Management
            for(Case singleNewCase : caseList){
                servicePoint = singleNewCase.ServicePoint__c;
                commodity = singleNewCase.Commodity__c;
                accountId = singleNewCase.AccountId;
                if (servicePoint != null && String.isNotBlank(servicePoint) && String.isBlank(commodity)) {
                    spIds.add(servicePoint);
                    needUpdate.put(servicePoint, true);
                }
                singleNewCase.Email__c = String.isBlank(singleNewCase.Email__c) && !String.isBlank(singleNewCase.SuppliedEmail) ? singleNewCase.SuppliedEmail : singleNewCase.Email__c;
                if(String.isNotBlank(accountId) && String.isBlank(singleNewCase.FirstName__c) && String.isBlank(singleNewCase.LastName__c)){
                    accountIdSet.add(accountId);
                    //caseAccountSet.add(singleNewCase.Id);
                }
            }
        }
        //2. Is From Updated
        else if(caseList != null && !caseList.isEmpty() && caseOldMap != null) {
            //Commodity Management
            for(Case singleCase : caseList){
                Case caseNew = singleCase;
                Case caseOld = (Case) caseOldMap.get(caseNew.Id);
                accountId = singleCase.AccountId;
                oldAccountId = caseOld.AccountId;
                servicePoint = caseNew.ServicePoint__c;
                servicePointOld = caseOld.ServicePoint__c;
                if((String.isBlank(commodity) && String.isBlank(servicePointOld) && String.isNotBlank(servicePoint)) || (String.isNotBlank(servicePointOld) && String.isNotBlank(servicePoint) && servicePoint != servicePointOld)){
                    spIds.add(servicePoint);
                    needUpdate.put(servicePoint, true);
                }
                if(String.isNotBlank(accountId) && String.isNotBlank(oldAccountId) && accountId != oldAccountId){
                    accountIdSet.add(accountId);
                }
            }
        }
        
        if(spIds!=null && !spIds.isEmpty()){
            HDT_QR_ServicePoint spQrClass = new HDT_QR_ServicePoint();
            List<ServicePoint__c> spList = spQrClass.getRecordByIdList(spIds,'Id,CommoditySector__c,Account__r.FirstName__c, Account__r.LastName__c');
            if(!spList.isEmpty()){
                Map<Id, ServicePoint__c> spMap = new Map<Id, ServicePoint__c>(spList);
                for(Case singleCaseToUpdate : caseList){
                    if(needUpdate.get(singleCaseToUpdate.ServicePoint__c) != null && needUpdate.get(singleCaseToUpdate.ServicePoint__c)){
                        singleCaseToUpdate.Commodity__c = spMap.get(singleCaseToUpdate.ServicePoint__c).CommoditySector__c;
                        singleCaseToUpdate.FirstName__c = String.isBlank(singleCaseToUpdate.FirstName__c)?spMap.get(singleCaseToUpdate.ServicePoint__c).Account__r.FirstName__c:singleCaseToUpdate.FirstName__c;
                        singleCaseToUpdate.LastName__c = String.isBlank(singleCaseToUpdate.LastName__c)?spMap.get(singleCaseToUpdate.ServicePoint__c).Account__r.LastName__c:singleCaseToUpdate.LastName__c;
                    }
                    
                }
            }
        }else if(!accountIdSet.isEmpty()){
            mapIdAccount = new Map<Id,Account>([SELECT Id,FirstName__c,LastName__c FROM Account WHERE Id IN:accountIdSet WITH SECURITY_ENFORCED]);
            for(Case singleCaseToUpdate : caseList){
                if(accountIdSet.contains(singleCaseToUpdate.AccountId) && mapIdAccount != null){
                    Account acc = mapIdAccount.get(singleCaseToUpdate.AccountId);
                    singleCaseToUpdate.FirstName__c = acc.FirstName__c;
                    singleCaseToUpdate.LastName__c = acc.LastName__c;
                }
            }
        }
    }


    public static void caseBpcaSieManagement(Map<Id, Sobject> newCasesMap, Map<Id, Sobject> oldCasesMap) {
        Set<Id> accountIdsBpca = new Set<Id>();
        for(Case caseNew : (List<Case>) newCasesMap.values()){
            if(String.isNotBlank(caseNew.Type) && String.isNotBlank(caseNew.Phase__c) && caseNew.Type.equals('BP/CA - errata categoria') && caseNew.Phase__c.equals('Completata') && caseNew.Phase__c != oldCasesMap.get(caseNew.Id).get('Phase__c')){
                accountIdsBpca.add(caseNew.AccountId);
            }
        }
        if(!accountIdsBpca.isEmpty()){
            system.debug('accountIdsBpca: ' + accountIdsBpca);
            new HDT_SRV_SieXiv().checkBpcaChanges(accountIdsBpca);
        }
    }

    public static void casePhaseManagementAfterUpdate(List<Case> newCasesList, List<Case> oldCasesList) {

        
        Map<String,Case> caseMapNewToOld = new Map<String,Case>();
        Map<String,Case> caseMapOld = new Map<String,Case>();
        Map<String,Case> caseMapNew = new Map<String,Case>();
        
        ////// stesso Case se phase__c diverso tra old e new chiamiamo funzione di una classe HDT_UTL_CommunicationLog
        
        for (Case oldCase : oldCasesList) {
            CaseMapOld.put(oldCase.id,oldCase);
        }
        for (Case newCase : newCasesList) {
           	caseMapNew.put(newCase.id,newCase);
            if(caseMapOld.get(newCase.id)!= null){
                caseMapNewToOld.put(newCase.id,caseMapOld.get(newCase.id));
            }
        }
        
        insertLogForCaseChangedPhase(caseMapOld,caseMapNew);

    }

    private static void insertLogForCaseChangedPhase(Map<String,Case> CaseMapOld, Map<String,Case> CaseMapNew){
        List<CommunicationLog__c> commList = new List<CommunicationLog__c>();
        Map<String,String> mapCaseToContact = new map<String,String>();
        Map<String,String> mapCaseToAccount = new map<String,String>();
        for (Case c : CaseMapNew.values()){
            mapCaseToContact.put(c.id,c.contactId);
            mapCaseToAccount.put(c.id,c.accountId);
        }
        Map<String,Contact> mapContact = new Map<String,Contact>(contactQr.getRecordsById(mapCaseToContact.values()));
        map<String,Account> mapAccount = new Map<String,Account>(accountQr.getRecordsById(mapCaseToAccount.values(),'Id,CompanyOwner__c'));
        for(String cas : CaseMapOld.keyset()){
           Case oldCase =  CaseMapOld.get(cas);
           if(CaseMapNew.get(cas) != null){
               Case newCase = CaseMapNew.get(cas);
               if(oldCase.phase__c != newCase.Phase__c){
                   Contact c = null;
                   Account a = null;
                   if(mapContact.get(newCase.Contactid) != null){
                       c = mapContact.get(newCase.Contactid);
                   }
                   if(mapAccount.get(newCase.AccountId) != null){
                       a = mapAccount.get(newCase.AccountId);
                   }
                   if(a != null && c != null && newCase.Lead__c == null){
                    commList.add(commUTL.instanceCommunicationLog(newCase.cluster__c,newCase.type,newCase.Phase__c,newCase.status,newCase.CancellationReasonDescription__c,'',newCase.id,newCase.ContactId,newCase.AccountId, STRING.isNotBlank(c?.company__c) ? c.company__c : 'ND',a != null ? a.CompanyOwner__c : ''));
                   }  
               }
           }
        }
        if(commList != null && !commList.isEmpty()){
            commSRV.createRecords(commList);
        }
    }
    public static Boolean checkSkipExportSie(List<Case> caseList, Map<Id,SObject> caseOldMap){
        Case caseNew = caseList[0];
		Case caseOld = (Case) caseOldMap.get(caseNew.Id);
		Boolean newCmor = caseNew.IsExportCMOR__c;
		Boolean oldCmor = caseOld.IsExportCMOR__c;
        if( !oldCmor && newCmor) return true;
        return false;
    }
    
    public static Boolean isChangedPhase(List<Case> caseList, Map<Id,SObject> caseOldMap){
        Case caseNew = caseList[0];
		Case caseOld = (Case) caseOldMap.get(caseNew.Id);
		String phaseNew = caseNew.Phase__c != null? caseNew.Phase__c:'';
		String phaseOld = caseOld.Phase__c != null? caseOld.Phase__c:'';
        if(
            (String.isNotBlank(phaseNew) && String.isNotBlank(phaseOld) && phaseNew != phaseOld) || 
            (String.isBlank(phaseOld) && String.isNotBlank(phaseNew))
        )return true;
        return false;
    }
    public static void handleAfterUpdate(List<Case> caseList, Map<Id,SObject> caseOldMap){
        HDT_QR_Case caseQr = new HDT_QR_Case();
        Case caseNew = caseList[0];
        Case caseOld = (Case) caseOldMap.get(caseNew.Id);
        String newPhase = caseNew.Phase__c;
        String oldPhase = caseOld.Phase__c;
        DateTime nowDateTime = DateTime.now();
        if(String.isNotBlank(newPhase) && String.isNotBlank(oldPhase) && newPhase != oldPhase){
            /**@frpanico
             * Added comment:
             * Se la fase di arrivo e' di annullamento o Annullato
             * si entra nell'if per tutte le gestioni ad hoc dei processi
             */
            if(newPhase.indexOf('Annullamento') > -1 || newPhase.equalsIgnoreCase('Annullato') || newPhase.indexOf('Ripensamento') > -1 || newPhase.equalsIgnoreCase('Ripensato')){
                //Annullamento Case di Richiesta Parere legati al case di Reclamo
                //Annullamento activities legate al case di Richiesta Parere
                if(caseNew.Type.equalsIgnoreCase('Reclamo Scritto/Rich. Info') || caseNew.Type.equalsIgnoreCase('Reclamo Scritto Da Cittadino')){  
                    List<Case> childCases = new List<Case>();
                    List<String> caseIds = new List<String>();
                    List<wrts_prcgvr__Activity__c> activities = new List<wrts_prcgvr__Activity__c>();
                    List<SObject> updateList = new List<SObject>();
                    Set<String> activitiesOwnerId = new Set<String>();
                    String activityId = '';
                    childCases = caseQr.getChildCase(caseNew.Id);
                    if(childCases != null){
                        for(Case child : childCases){
                            if(!(child.Phase__c.equalsIgnoreCase('Completata'))){
                                caseIds.add(child.Id);
                                child.CancellationNote__c = childOpinionCanc;
                                child.Phase__c = 'Annullato';
                                child.Status = 'Closed';
                            }
                        }
                        if(caseIds != null){
                            try{
                                HDT_QR_Knowledge knowledgeQr = new HDT_QR_Knowledge();
                                CustomNotificationType customNotif = new CustomNotificationType();
                                customNotif = knowledgeQr.getCustomNotificationType();
                                activities = caseQr.getCaseActivities(caseIds);
                                if(activities != null){
                                    List<wrts_prcgvr__Activity__c> activitiesToUpdate = new List<wrts_prcgvr__Activity__c>();
                                    for(wrts_prcgvr__Activity__c activity : activities){
                                        if (!'Eseguire Gestione Manuale SAP'.equalsIgnoreCase(activity.Type__c)){
                                            activitiesOwnerId.clear();
                                            if(activity.OwnedByUser__c != null && String.isNotBlank(activity.OwnedByUser__c)){
                                                activityId = activity.OwnedByUser__c;
                                            }else{
                                                activityId = activity.OwnerId;
                                            }
                                            activitiesOwnerId.add(activityId);
                                            activity.wrts_prcgvr__Status__c = 'Annullata';
                                            //Notification Fire to activity's owner
                                            try{
                                                if(customNotif != null && activitiesOwnerId.size() > 0){
                                                    String title = 'Activity Annullata';
                                                    String body = 'L\'Activity ' + activity.wrts_prcgvr__ActivityTemplate__r.Name + ' è stata annullata';
                                                    HDT_UTL_NewsNotificationCenter.fireNotification(title,body,activity.Id,activitiesOwnerId);
                                                }
                                            } catch(Exception e){
                                                System.debug(LoggingLevel.DEBUG, 'Impossibile inviare notifica: ' + e.getMessage() + '. Error at line: ' + e.getLineNumber());
                                            }
                                            activitiesToUpdate.add(activity);
                                        }
                                    }
                                    if (!activitiesToUpdate.isEmpty()){
                                        updateList.addAll(activitiesToUpdate);
                                    }
                                }
                            }catch(Exception e){
                                System.debug(LoggingLevel.DEBUG, 'Exception: ' + e.getMessage() + '. At Line: ' + e.getLineNumber());
                            }
                        }
                        updateList.addAll(childCases);
                        HDT_UTL_DatabaseService.updateSObject(updateList);
                    }
                }
                /* Richiesta Parere
                * Il case padre (reclamo scritto) viene riportato In Lavorazione
                * Se le CancellationNote sono vuote o diverse da '[REC-0001] Annullato per annullamento case padre' 
                * si procede alla movimentazione del case padre di Reclamo Scritto
                * in caso contrario siamo nelle condizioni di annullamento top -> bottom e dunque non si deve movimentare il case di Reclamo 
                */
                if(caseNew.Type.equalsIgnoreCase('Richiesta Parere') && newPhase.equalsIgnoreCase('Annullato') && caseNew.ParentId != null 
                    && (String.isBlank(caseNew.CancellationNote__c) || (String.isNotBlank(caseNew.CancellationNote__c) && !caseNew.CancellationNote__c.equalsIgnoreCase(childOpinionCanc))))
                {
                    Case complaintCase = new Case();
                    complaintCase.Id = caseNew.ParentId;
                    complaintCase.Phase__c = 'In Lavorazione';
                    HDT_UTL_DatabaseService.updateSObject(complaintCase);
                }
                //Contratto Non Richiesto
                if(newPhase.equalsIgnoreCase('Annullato')){
                    Case nonReqContr = new Case();
                    nonReqContr = caseQr.getNonReqContrCase(caseNew.Id);
                    System.debug(LoggingLevel.DEBUG, 'Id ' + nonReqContr.Id);
                    System.debug(LoggingLevel.DEBUG, 'Id Cond ' + String.isBlank(nonReqContr.Id));
                    if(!(String.isBlank(nonReqContr.Id))){
                        nonReqContr.Phase__c = 'Completata';
                        HDT_UTL_DatabaseService.updateSObject(nonReqContr);
                    }
                    /**@frpanico 17/01/2022
                     * Annullamento activity al passaggio nella fase Annullato
                     */
                    List<wrts_prcgvr__Activity__c> activitiesToCancel = new List<wrts_prcgvr__Activity__c>();
                    for(wrts_prcgvr__Activity__c activity : caseQr.getCaseActivities(new List<String>{caseNew.Id}))
                    {
                        if ('Autolettura'.equalsIgnoreCase(caseNew.Cluster__c) && 'Gestione Manuale SAP'.equalsIgnoreCase(activity.Type__c)){
                            continue;
                        }
                        //CR31 - Nel caso in cui il case sia stato annullato e l'activity sia di Contatto Cliente, la lascio aperta per dare la possibilità all'operatore come da requisito di lavorarla.
                        if(!'Contattare il cliente'.equalsIgnoreCase(activity.Type__c)){
                            activity.wrts_prcgvr__Status__c = 'Annullata';
                            activitiesToCancel.add(activity);
                        }
                    }
                    if(!activitiesToCancel.isEmpty())
                    {
                        HDT_UTL_DatabaseService.updateSObject(activitiesToCancel);
                    }
                }
                //Variazione Indirizzzo di Fornitura
                if(caseNew.Type.containsIgnoreCase('Variazione indirizzo di fornitura') || caseNew.Type.containsIgnoreCase('Marcatura/Uso PdR')){
                    System.debug(LoggingLevel.DEBUG, 'Inside Condition');
                    HDT_UTL_Case.createActivity(caseNew.Id, 'Annullare Case di Allineamento Anagrafica o crearne uno opposto', 'Annullamento Allineamento', 'Annullamento Allineamento');
                }
                //CR31 - Creazione Activity all'annullamento Autolettura da Cliente
                if(caseNew.ParentId != null){
                    Case parentCase = new Case();
                    parentCase = caseQr.getParentCaseById(caseNew.ParentId);
                    
                    if('Annullato'.equalsIgnoreCase(newPhase) && 'Autolettura da cliente'.equalsIgnoreCase(caseNew.Type) && 'Inviato al DL'.equalsIgnoreCase(oldPhase) && parentCase != null && 'Errore Stima Consumi'.equalsIgnoreCase(parentCase.Subprocess__c) && ('Energia Elettrica'.equalsIgnoreCase(caseNew.CommodityFormula__c) || 'Gas'.equalsIgnoreCase(caseNew.CommodityFormula__c))){
                        HDT_UTL_Case.createActivity(caseNew.Id, '', 'CBS_CRP002__CONTATTARE_IL_CLIENTE_POSTSALES', 'Contattare il cliente');
                    }
                }
            }
        }
    }
    public static Boolean manageCancellationProcess(List<Case> caseList, Map<Id,SObject> caseOldMap){
        HDT_QR_Case caseQr = new HDT_QR_Case();
		Case caseNew = caseList[0];
		Case caseOld = (Case) caseOldMap.get(caseNew.Id);
		String newPhase = caseNew.Phase__c;
		String oldPhase = caseOld.Phase__c;
        DateTime nowDateTime = DateTime.now();
		if(String.isNotBlank(newPhase) && String.isNotBlank(oldPhase) && newPhase != oldPhase){
            /**@frpanico
             * Added comment:
             * Se la fase di arrivo e' di annullamento o Annullato
             * si entra nell'if per tutte le gestioni ad hoc dei processi
             */
			if(newPhase.indexOf('Annullamento') > -1 || newPhase.equalsIgnoreCase('Annullato') || newPhase.indexOf('Ripensamento') > -1 || newPhase.equalsIgnoreCase('Ripensato')){
                
                /**@frpanico 22/10/2021
                 * Reintrodotto PhaseManager per annullamento
                 * viene skippato solo in entrata e in uscita dall'annullamento dove non sono previste activity
                 * Viene mantenuto per gli annullamenti passivi dove la fase é Annullamento SII
                 * L'if in questione skippa il phase manager solo se la fase di partenza non e' di annullamento.
                 * Nelle fasi di annullamento si fase di partenza che fase di arrivo sono Annullamento - o Annullato.
                 */
                if((oldPhase.indexOf('Annullamento - ') == -1 && oldPhase.indexOf('Ripensamento - ') == -1)
                    || newPhase.equalsIgnoreCase('Annullato') || newPhase.equalsIgnoreCase('Ripensato'))
                {
                    caseNew.PhaseStory__c = oldPhase+'@@'+newPhase+'@@'+nowDateTime.getTime()+'@@A||'+caseNew.PhaseStory__c;
                    return true;
                }
                //Gestione Risottomissione Annullamento
                if ((oldPhase.equalsIgnoreCase('Annullamento - Ammissibilità KO') || oldPhase.equalsIgnoreCase('Annullamento - Esito KO da DL/SII')) && newPhase.equalsIgnoreCase('Annullamento - Da Inviare')){
                    caseNew.PhaseStory__c = !String.isBlank(caseNew.PhaseStory__c) 
                        ? oldPhase+'@@'+newPhase+'@@'+nowDateTime.getTime()+'@@A||'+caseNew.PhaseStory__c
                        : oldPhase+'@@'+newPhase+'@@'+nowDateTime.getTime()+'@@A||';
                    return true;
                }
                return false;
                /**@frpanico 22/10/2021
                 * Add Comment:
                 * Si entra in questo blocco quando la fase di partenza e' di annullamento e la nuova non lo e'  
                 */    
			}else if(oldPhase.indexOf('Annullamento - ') > -1 || oldPhase.indexOf('Ripensamento - ') > -1){
                caseNew.PhaseStory__c = oldPhase+'@@'+newPhase+'@@'+nowDateTime.getTime()+'@@A||'+caseNew.PhaseStory__c;

				return true;
			}
		}
		return false;
	}
    
    public static void updateMemberStatusforClosedCases(List<Case> newCasesList, List<Case> oldCasesList) {
        try{
            List<Id> closedCaseIds = new List<Id>();
            Map<String,Case> oldCaseMap = new Map<String,Case>();
            for(Case c : oldCasesList){
                oldCaseMap.put(c.id,c);
            }
            Map<String,String> accountIdCase = new Map<String,String> ();
            Map<String,String> campaignIdCase = new Map<String,String>();
            for (Case newCase : newCasesList) {// Start 27/08/2021 HRAWRM-314 per processi autoconclusivi (newCase.Status == 'In Lavorazione')||newCase.Status == 'Closed')
                if (oldCaseMap.get(newCase.id) != null && (oldCaseMap.get(newCase.id).status == 'New' && (newCase.Status == 'In Lavorazione')||newCase.Status == 'Closed')) {
                    closedCaseIds.add(newCase.Id);
                    accountIdCase.put(newCase.AccountId, newCase.Id);
                    campaignIdCase.put(newCase.Campaign__c, newCase.Id);
                }
            }

            List<String> accountIds = new List<String>(accountIdCase.keySet());
            List<String> campaignIds = new List<String>(campaignIdCase.keySet());
            if(!campaignIds.isEmpty()){
                List<CampaignMember> membersToUpdate = new List<CampaignMember>();
                List<CampaignMember> cmembers = campaignMemberQr.getMembersByAccountAndCampaign(accountIds, campaignIds);
                for (CampaignMember cm : cmembers) {
                    if (accountIdCase.get(cm.Contact.AccountId) == campaignIdCase.get(cm.CampaignId)) {
                        CampaignMember updateMember = new CampaignMember();
                        updateMember.Id = cm.Id;
                        updateMember.Status = 'Positivo';
                        membersToUpdate.add(updateMember);
                    }
                }
                //update campaignMember siblings Status a 'Non Proposto Auto'
                List<CampaignMember> siblingMembers = HDT_QR_CampaignMember.getSiblingMembersByAccountId(accountIds, newCasesList[0].Campaign__r.Channel__c);
                List<String> campaignMembersIdList = new List<String>(new Map<String, CampaignMember>(siblingMembers).keySet());
                if (campaignMembersIdList.size()>0) {
                    HDT_LC_CampaignsController.updateCampaignMembersStatus(campaignMembersIdList, 'Non Proposto Auto');
                }
                campaignMemberSrv.updateRecords(membersToUpdate);
            }
		}catch(Exception e)
		{
            System.debug(LoggingLevel.DEBUG, '*******Error:' + e);
		}
    }

    public static void updateServiceRequest(List<Case> newCasesList, List<Case> oldCasesList){
        Map<String,Case> mapCases = new Map<String,Case>();
        Map<String,String> caseStatuses= new Map<String,String>();
        List<ServiceRequest__c> sReqToUpdate= new List<ServiceRequest__c>();
        Set<Id> caseIds= new Set<Id>();
        for(Case o: oldCasesList){
            mapCases.put(o.id, o);
        }
        for (Case cs: newCasesList){
            Case oldCase= mapCases.get(cs.id);
            
            if(cs.Status != oldCase.Status ){
                caseIds.add(cs.Id);
                caseStatuses.put(cs.Id, cs.Status);
            }
        }
        if (!caseIds.isEmpty()){
            List<ServiceRequest__c> srvRequests = HDT_QR_ServiceRequest.getServiceRequestByOrderCaseIds(caseIds, 'Case__c');
            List<ServiceRequest__c> srvRequestsToDelete = new List<ServiceRequest__c>();
            for(ServiceRequest__c s: srvRequests){
                s.Status__c= HDT_UTL_MatrixCompatibility.getStatus(caseStatuses.get(s.Case__c), 'Case');
                if( s.Status__c.equalsIgnoreCase('Chiuso') ){
                    srvRequestsToDelete.add(s);
                } else {
                    sReqToUpdate.add(s);
                }
            }
            if (!srvRequestsToDelete.isEmpty()){
                HDT_SRV_ServiceRequest.deleteRecord(srvRequestsToDelete);
            }
            HDT_SRV_ServiceRequest.updateRecord(sReqToUpdate);
        }
    }

    /**
    * @author Andrea Arosio (andrea.arosio@webresults.it)
    * @description metodo per il collegamento dell'oggetto tecnico serviceRequest al case di riferimento
    * @date 16/09/2021
    * @param1 List<Case> lista dei cases inseriti
    */
    public static void linkServiceRequestToCase(List<Case> newCasesList){
        List<ServiceRequest__c> sReqToUpdate= new List<ServiceRequest__c>();
        for (Case cs: newCasesList){
            
            if(!String.isEmpty(cs.ServiceRequestID__c)){
                ServiceRequest__c sReq = new ServiceRequest__c(Id= cs.ServiceRequestID__c);
                sReq.Case__c = cs.Id;
                sReqToUpdate.add(sReq);
            }
        }
        HDT_SRV_ServiceRequest.updateRecord(sReqToUpdate);
    }

    /**
    * @author Marco Arci (marco.arci@webresults.it)
    * @description metodo per la chiusura delle activity "aprire cessazione" correlate al case al suo completamento
    * @date 17/05/2022
    * @param1 List<Case> lista dei cases inseriti
    * @param1 Map<Id,SObject> Mappa della vecchia versione dei cases inseriti
    */
    //Metodo non più necessario dato che la logica di chiusura avviene dalla activity verso il case gestita nella classe HDT_UTL_ActivityCloseActions
    /*
    public static void closeRelatedActivity(List<Case> triggerNew, Map<Id,SObject> oldMap){
        list<Id> effectiveCase = new List<Id>();
        for(Case currCase : triggerNew){
            if('Confermato'.equalsIgnoreCase(currCase.Phase__c) && 
               'HDT_RT_DisattivazioniTari'.equalsIgnoreCase(currCase.RecordType.DeveloperName) &&
               'Cessazione post accertamento'.equalsIgnoreCase(currCase.Type) &&
               ((Case)oldMap.get(currCase.Id)).Phase__c != currCase.Phase__c){
                effectiveCase.add(currCase.Id);
            }
        }
        List<wrts_prcgvr__Activity__c> toClose = [SELECT Id, Case__c, wrts_prcgvr__Status__c, Type__c 
                                                     FROM wrts_prcgvr__Activity__c 
                                                     WHERE Case__c IN: effectiveCase
                                                     AND Type__c = 'Aprire cessazione'
                                                     AND wrts_prcgvr__Status__c != 'Chiusa'
                                                     AND wrts_prcgvr__Status__c != 'Annullata'];
        for(wrts_prcgvr__Activity__c currAct : toClose){
            currAct.wrts_prcgvr__Status__c = 'Chiusa';
        }
        Database.update(toClose);
    }
    */
    /**
    * @author Marco Arci (marco.arci@webresults.it)
    * @description metodo chiamato dal batch HDT_BA_PostSalesMasterBatch per generare activity se sono stati trovati contratti per i processi di post accertamento di variazioni tari e disattivazioni tari
    * @date 18/05/2022
    * @param1 List<Case> lista dei cases inseriti
    */
    public static void createActivityFromContract(List<Case> cases){
        try{
            Map<Id,Case> mapCases = new Map<Id,Case>(cases);
            List<String> caseIds =  new List<String>();
            caseIds.addAll((Set<String>)JSON.deserialize(JSON.serialize(mapCases.keyset()), Set<String>.class));
            system.debug('##### caseIds: '+caseIds);
            List<wrts_prcgvr__Activity__c> notInsertActivity = HDT_QR_Activity.getActivityFromTypeList(caseIds, new Set<String>{'Aprire variazione','Aprire Cessazione'});

            system.debug('##### mapCases: '+mapCases);
            for(wrts_prcgvr__Activity__c currAct : notInsertActivity){
                mapCases.remove(currAct.Case__c);
            }
            system.debug('##### newMapCases: '+mapCases);

            Map<String,Case> mapUniqueCase = new Map<String,Case>{};
            Map<String, List<String>> fieldsMap = new Map<String,List<String>>{'AccountId' => new List<String>(), 'SupplyCity__c' => new List<String>(), 'SupplyStreetName__c' => new List<String>()};
            for(Case currCase : mapCases.values()){
                system.debug('@@@ Case Id:'+currCase.Id);

                fieldsMap.get('AccountId').add(currCase.AccountId);
                fieldsMap.get('SupplyCity__c').add(currCase.SupplyCity__c);
                fieldsMap.get('SupplyStreetName__c').add(currCase.SupplyStreetName__c);

                system.debug('@@@ Case AccountId:'+fieldsMap.get('AccountId'));
                system.debug('@@@ Case SupplyCity__c:'+fieldsMap.get('SupplyCity__c'));
                system.debug('@@@ Case SupplyStreetName__c:'+fieldsMap.get('SupplyStreetName__c'));
            }

            List<Contract> relatedContracts = [ SELECT Id, AccountId, ServicePoint__r.SupplyCity__c, ServicePoint__r.SupplyStreetName__c
                                                                                                                                                        FROM Contract
                                                                                                                                                        WHERE AccountId IN: fieldsMap.get('AccountId')
                                                                                                                                                        AND ServicePoint__r.SupplyCity__c IN: fieldsMap.get('SupplyCity__c')
                                                                                                                                                        AND ServicePoint__r.SupplyStreetName__c IN: fieldsMap.get('SupplyStreetName__c')
                                                                                                                                                        AND ServicePoint__r.CommoditySector__c = 'Ambiente'
                                                                                                                                                        AND Status = 'Attivo'];
            system.debug('#####relatedContracts: '+relatedContracts);

            Map<String,Contract> mapUniqueContract = new Map<String,Contract>{};
            for(Contract currContract : relatedContracts){
                mapUniqueContract.put(  String.valueOf(currContract.AccountId)+
                                        currContract.ServicePoint__r.SupplyCity__c.toUpperCase()+
                                        currContract.ServicePoint__r.SupplyStreetName__c.toUpperCase(),currContract);
                system.debug('##### uniqueContract'+(   String.valueOf(currContract.AccountId)+
                                                        currContract.ServicePoint__r.SupplyCity__c.toUpperCase()+
                                                        currContract.ServicePoint__r.SupplyStreetName__c.toUpperCase()));
            }

            List<Case> toAnnul = new List<Case>();
            String tempUniqueKey;
            List<Id> modPostAccForActivity = new List<Id>();
            List<Id> cesPostAccForActivity = new List<Id>();
            for(Case currCase : mapCases.values()){

                tempUniqueKey = String.valueOf(currCase.AccountId)+
                                currCase.SupplyCity__c.toUpperCase()+
                                currCase.SupplyStreetName__c.toUpperCase();
                system.debug('##### uniqueCase: '+tempUniqueKey);

                if(mapUniqueContract.get(tempUniqueKey) != null){
                    if('Modifica post accertamento'.equalsIgnoreCase(currCase.Type)){
                        modPostAccForActivity.add(currCase.Id);
                    }else if('Cessazione post accertamento'.equalsIgnoreCase(currCase.Type)){
                        cesPostAccForActivity.add(currCase.Id);
                    }
                }else{
                    if(Date.valueOf(currCase.CreatedDate).daysBetween(Date.valueOf(system.today()))>=30){
                        toAnnul.add(new Case(   Id = currCase.Id, 
                                                Status = 'Closed',
                                                Phase__c='Chiuso'));
                    }
                }

            }

            List<wrts_prcgvr__Activity__c> actToInsert = new List<wrts_prcgvr__Activity__c>();
            if(modPostAccForActivity.size() > 0){
                actToInsert.addAll(HDT_UTL_Scarti.createActivityByObjectIdAndTemplateNameBulk(modPostAccForActivity, 'CBS_VAR005__GESTIONE_MANUALE'));
            }
            if(cesPostAccForActivity.size() > 0){
                actToInsert.addAll(HDT_UTL_Scarti.createActivityByObjectIdAndTemplateNameBulk(cesPostAccForActivity, 'CBS_DIS002__GESTIONE_MANUALE'));
            }

            system.debug('##### activity: '+actToInsert);
            String caseType;
            for(wrts_prcgvr__Activity__c currAct : actToInsert){
                system.debug('####wrts_prcgvr__ObjectId__c: '+currAct.wrts_prcgvr__ObjectId__c);
                caseType = mapCases.get((Id)currAct.wrts_prcgvr__ObjectId__c).Type;
                if('Modifica post accertamento'.equalsIgnoreCase(caseType)){
                    currAct.Type__c='Aprire Variazione';
                }else if('Cessazione post accertamento'.equalsIgnoreCase(caseType)){
                    currAct.Type__c='Aprire Cessazione';
                }
                currAct.Account__c = currAct.Case__r.AccountId;
                currAct.ServicePoint__c = currAct.Case__r.ServicePoint__c;
                currAct.wrts_prcgvr__Status__c = 'Aperta';
                currAct.DiscardCategory__c = 'Manuale';
            }
            system.debug('#### actToInsert already updated: '+actToInsert);

            system.debug('@@@ before dml operation');
            update toAnnul;
            insert actToInsert;
        }catch(exception e){
            system.debug(e);
        }

        /*
        try{
            Map<String, List<String>> fieldsMap = new Map<String,List<String>>{'AccountId' => new List<String>(), 'SupplyCity__c' => new List<String>(), 'SupplyStreetName__c' => new List<String>()};
            List<Case> toAnnul = new List<Case>();
            List<String> caseIds = new List<String>();
            for(Case currCase : cases){
                system.debug('@@@ Case Id:'+currCase.Id);
                caseIds.add(currCase.Id);
                //casesMap.put(currCase.Id, new Map<String,String>{'AccountId' => currCase.AccountId, 'SupplyCity__c' => currCase.SupplyCity__c, 'SupplyStreetName__c' => currCase.SupplyStreetName__c});
                fieldsMap.get('AccountId').add(currCase.AccountId);
                fieldsMap.get('SupplyCity__c').add(currCase.SupplyCity__c);
                fieldsMap.get('SupplyStreetName__c').add(currCase.SupplyStreetName__c);
                system.debug('@@@ Case AccountId:'+fieldsMap.get('AccountId'));
                system.debug('@@@ Case SupplyCity__c:'+fieldsMap.get('SupplyCity__c'));
                system.debug('@@@ Case SupplyStreetName__c:'+fieldsMap.get('SupplyStreetName__c'));
            }
            //verificare che selezione fornitura effettui questo controllo in fase di UAT
            //querare tabella 'dato tecnico comunale' con chiave i comuni del case e verificare se il flag di gestione è attivo
            // o se la data odierna rientra nel range tra 'data da' e 'data cutover',
            //con il risultato modificare la lista fieldsMap.get('SupplyCity__c') lasciando quelli trovati e togliendo quelli non trovati nella tabella
            List<Contract> relatedContracts = [SELECT Id, AccountId, ServicePoint__r.SupplyCity__c, ServicePoint__r.SupplyStreetName__c
                                            FROM Contract
                                            WHERE AccountId IN: fieldsMap.get('AccountId')
                                            AND ServicePoint__r.SupplyCity__c IN: fieldsMap.get('SupplyCity__c')
                                            AND ServicePoint__r.SupplyStreetName__c IN: fieldsMap.get('SupplyStreetName__c')
                                            AND Status = 'Attivo'];
            system.debug('@@@@ related contract: '+relatedContracts);
            
            
            List<wrts_prcgvr__Activity__c> newActivityToInsert = new List<wrts_prcgvr__Activity__c>();
            wrts_prcgvr__Activity__c tempAct = new wrts_prcgvr__Activity__c();
            boolean findContract;
            for(Case caseItem : cases){
                findContract = false;
                for(Contract currContract : relatedContracts){
                    system.debug('@@@ serching contract: '+currContract.Id);
                    if( ((String)caseItem.AccountId)?.equalsIgnoreCase(currContract.AccountId) &&
                        caseItem.SupplyCity__c?.equalsIgnoreCase(currContract.ServicePoint__r.SupplyCity__c) == true && 
                        caseItem.SupplyStreetName__c?.equalsIgnoreCase(currContract.ServicePoint__r.SupplyStreetName__c) &&
                        !excludedCases.contains(CaseItem.Id) ){
                            if('Modifica post accertamento'.equalsIgnoreCase(caseItem.Type)){
                                findContract = true;
                                tempAct = HDT_UTL_Scarti.createActivityByObjectIdAndTemplateName(caseItem.Id, 'CBS_VAR005__GESTIONE_MANUALE');
                                tempAct.Account__c=caseItem.AccountId;
                                tempAct.ServicePoint__c=caseItem.ServicePoint__c;
                                tempAct.wrts_prcgvr__Status__c ='Aperta';
                                tempAct.DiscardCategory__c = 'Manuale';
                                tempAct.Type__c='Aprire Variazione';
                                newActivityToInsert.add(tempAct);
                                break;
                            }else if('Cessazione post accertamento'.equalsIgnoreCase(caseItem.Type)){
                                findContract = true;
                                tempAct = HDT_UTL_Scarti.createActivityByObjectIdAndTemplateName(caseItem.Id, 'CBS_DIS002__GESTIONE_MANUALE');
                                tempAct.Account__c=caseItem.AccountId;
                                tempAct.ServicePoint__c=caseItem.ServicePoint__c;
                                tempAct.wrts_prcgvr__Status__c ='Aperta';
                                tempAct.DiscardCategory__c = 'Manuale';
                                tempAct.Type__c='Aprire Cessazione';
                                newActivityToInsert.add(tempAct);
                                break;
                            }
                    }
                }
                if(findContract == false && Date.valueOf(caseItem.CreatedDate).daysBetween(Date.valueOf(system.today()))>=30){
                    caseitem.Status='Closed';
                    caseItem.Phase__c='Chiuso';
                    toAnnul.add(caseitem);
                }
            }
            system.debug('@@@ before dml operation');
            update toAnnul;
            insert newActivityToInsert;
        }catch(exception e){
            system.debug(e);
        }
        */
    }
    public static void setCloseStatusForAll(List<Case> caseList){
        for(Case c : caseList) {
            setCloseStatus(c);
        }
    }

    public static void setCloseStatus(Case c){
        if ('Chiuso'.equalsIgnoreCase(c.Status)){
            c.Status = 'Closed';
        }
    }

    public static void closeChildActivityGestioneBackOffice(List<Case> newCaseList, List<Case> oldCaseList){
        Set<Id> caseIds = new Set<Id>();
        Map<Id, Case> oldCaseMap = new Map<Id, Case>(oldCaseList);
        List<wrts_prcgvr__Activity__c> activitiesToUpdate = new List<wrts_prcgvr__Activity__c>();
        String phaseUpdated = '';
        for(Case c : newCaseList){
            if('Consumo Anomalo Idrico'.equalsIgnoreCase(c.Type) && 
            ((c.Phase__c=='Documentazione validata' && oldCaseMap.get(c.id).Phase__c=='Fuga da Gestire - In attesa validazione') ||
             (c.Phase__c=='Documentazione incompleta' && oldCaseMap.get(c.id).Phase__c=='Fuga da Gestire - In attesa validazione') ||
             (c.Phase__c=='Documentazione da verificare sul posto' && oldCaseMap.get(c.id).Phase__c=='Fuga da Gestire - In attesa validazione'))){
                caseIds.add((ID)c.Id);
                phaseUpdated = c.Phase__c;
            }
        }

        Map<Id, wrts_prcgvr__Activity__c> activitiesMap = new Map<Id, wrts_prcgvr__Activity__c>([SELECT Id, wrts_prcgvr__Status__c, Reason__c FROM wrts_prcgvr__Activity__c WHERE Type__c = 'Gestione Back Office' AND wrts_prcgvr__Status__c = 'Aperta' AND Case__c IN :caseIds WITH SECURITY_ENFORCED]);
        
        if(!activitiesMap.isEmpty()){
            for(wrts_prcgvr__Activity__c act : activitiesMap.values()){
                act.wrts_prcgvr__Status__c = 'Chiusa';
                if(phaseUpdated == 'Documentazione incompleta'){
                    act.Reason__c = 'Documentazione Incompleta';
                }
                activitiesToUpdate.add(act);
            }
        }

        HDT_UTL_DatabaseService.updateSObject(activitiesToUpdate);
    }


}
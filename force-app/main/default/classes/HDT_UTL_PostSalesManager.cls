public inherited sharing class HDT_UTL_PostSalesManager{

    private HDT_QR_Contract contractQr = new HDT_QR_Contract();
    private HDT_QR_Case caseQr = new HDT_QR_Case();
    private HDT_QR_PostSalesManager postsalesQr = new HDT_QR_PostSalesManager();
    private HDT_SRV_Order orderSrv = new HDT_SRV_Order();

    public void changeCaseValue(Sobject inputCase){

        Case currentCase = (Case) inputCase;

        currentCase.Subject = 'Il metodo ha funzionato';

    }


    public void changeQuotationType(SObject inputCase){

        Case currentCase = (Case) inputCase;

        System.debug('Amount --> '+currentCase.Amount__c);

        System.debug('Condition--> '+currentCase.Amount__c != null);

        if(currentCase.Amount__c != null){

            System.debug('QuotationType__c before --> '+currentCase.QuotationType__c);

            currentCase.QuotationType__c = 'Predeterminabile';

            System.debug('QuotationType__c after --> '+currentCase.QuotationType__c);

        }

    }

    public void closeContract(SObject inputCase){

        Case currentCase = (Case) inputCase;
        List<Contract> contractList = new List<Contract>();

        try{

            contractList = contractQr.getRecordById(currentCase.Contract__c);
            contractList[0].Status = 'Cessato';
            HDT_UTL_DatabaseService.updateSObject(contractList);
            
        }catch(Exception e){
            
            System.debug(e.getMessage());

        }


    }

    public void advanceParentCasePhase(SObject inputCase){

        Case currentCase = (Case) inputCase;
        Case parentCase = new Case();

        try{
            parentCase = caseQr.getParentCaseById(currentCase.ParentId);
        }catch(Exception e){
            System.debug(e.getMessage());
        }
        if(parentCase != null){

            if(parentCase.Type == 'Variazione indirizzo di fornitura'){

                if(currentCase.Phase__c == 'KO definitivo'
                || postsalesQr.checkLocalDispatcher(parentCase.DistributorName__c) == 0){
                    parentCase.Phase__c = 'Elaborazione Manuale';
                    wrts_prcgvr__Activity__c activity = createActivity('Elaborazione Manuale');
                    activity.Case__c = parentCase.Id;
                    HDT_UTL_DatabaseService.insertSObject(activity);
                } else {
                    parentCase.Phase__c = 'Completata';
                }
            }else if(parentCase.Type.equalsIgnoreCase('Modifica Tariffa Residente/Non Residente')){
                parentCase.Phase__c = 'Elaborazione Manuale';
            }
             else if(parentCase.Type.equalsIgnoreCase('Allineamento Canone Rai')){
                if(currentCase.Phase__c.equalsIgnoreCase('KO definitivo')){
                    wrts_prcgvr__Activity__c activity = createActivity('Elaborazione Manuale');
                    activity.Case__c = parentCase.Id;
                    HDT_UTL_DatabaseService.insertSObject(activity);
                } else {
                    parentCase.Phase__c = 'Completata';
                }
            } else if(parentCase.Type.equalsIgnoreCase('Gestione Disalimentabilit√†')){
                wrts_prcgvr__Activity__c activity = createActivity('Eseguire Gestione Manuale SAP');
                activity.Case__c = parentCase.Id;
                activity.wrts_prcgvr__IsRequired__c	= true;
                HDT_UTL_DatabaseService.insertSObject(activity);
            }

            HDT_UTL_DatabaseService.updateSObject(parentCase);
        }


    }

    public void handleVariazioneAnagraficaCliente(SObject inputCase) {

        if (inputCase == null) {
            System.debug('handleVariazioneAnagraficaCliente: null input case.');
            return;
        }

        Case currentCase = (Case) inputCase;
        System.debug('Gestione dati VariazioneAnagraficaCliente da case:' + currentCase.Id);
        SObject objToUpdate = null;

        switch on currentCase.SubProcess__c {
            when 'Modifica Dati Fiscali' {
                Account acc = new Account();
                acc.Id = currentCase.AccountId;
                acc.FirstName__c = currentCase.FirstName__c;
                acc.LastName__c = currentCase.LastName__c;
                acc.Name = String.isBlank(currentCase.FirstName__c) ? currentCase.LastName__c : currentCase.FirstName__c + ' ' + currentCase.LastName__c;
                acc.FiscalCode__c = currentCase.FiscalCode__c;
                acc.VatNumber__c = currentCase.VatNumber__c;
                acc.BillingCity = currentCase.BillingCity__c;
                acc.BillingCityCode__c = currentCase.BillingCityCode__c;
                acc.BillingCountry = currentCase.BillingCountry__c;
                acc.BillingIsAddressVerified__c = currentCase.BillingIsAddressVerified__c;
                acc.BillingPlace__c = currentCase.BillingPlace__c;
                acc.BillingPostalCode = currentCase.BillingPostalCode__c;
                acc.BillingState = currentCase.BillingProvince__c;
                acc.BillingStreetCode__c = currentCase.BillingStreetCode__c;
                acc.BillingStreetName__c = currentCase.BillingStreetName__c;
                acc.BillingStreetNumber__c = currentCase.BillingStreetNumber__c;
                acc.BillingStreetNumberExtension__c = currentCase.BillingStreetNumberExtension__c;
                objToUpdate = acc;
            }
            when 'Variazione Gruppo IVA' {
                Account acc = new Account();
                acc.Id = currentCase.AccountId;
                acc.IsVATGroupJoined__c = currentCase.IsVATGroupJoined__c;
                acc.VATGroup__c = currentCase.VATGroup__c;
                acc.VATGroupStartDate__c = currentCase.VATGroupStartDate__c;
                acc.VATGroupEndDate__c = currentCase.VATGroupEndDate__c;
                objToUpdate = acc;
            }
            when 'Modifica Dati di Contatto' {
                Contact c = new Contact();
                c.Id = currentCase.ContactId;
                c.Email = currentCase.Email__c;
                c.Phone = currentCase.PhoneNumber__c;
                c.MobilePhone = currentCase.Mobile__c;
                c.CertifiedEmail__c = currentCase.CertifiedEmail__c;
                c.Fax = currentCase.Fax__c;
                objToUpdate = c;

                Account acc = new Account();
                acc.Id = currentCase.AccountId;
                acc.CustomerMarking__c = currentCase.CustomerMarking__c;
                HDT_UTL_DatabaseService.updateSObject(acc);
            }
            when 'Modifica Dati di Recapito' {
                BillingProfile__c bp = new BillingProfile__c();
                bp.Id = currentCase.BillingProfile__c;
                bp.CareOf__c = currentCase.CareOf__c;
                bp.InvoiceEmailAddress__c = currentCase.InvoiceEmail__c;
                bp.BillSendingMethod__c = currentCase.BillSendingMethod__c;
                bp.InvoiceCertifiedEmailAddress__c = currentCase.InvoiceCertifiedEmailAddress__c;
                bp.SendCertifiedEmailConsentDate__c = currentCase.SendCertifiedEmailConsentDate__c;
                bp.ElectronicInvoicingMethod__c = currentCase.ElectronicInvoicingMethod__c;
                bp.ElectronicInvoiceCertifiedEmailAddress__c = currentCase.ElectronicInvoiceCertifiedEmailAddress__c;
                bp.OfficeSubjectCode__c = currentCase.OfficeSubjectCode__c;
                bp.XMLType__c = currentCase.XMLType__c;
                bp.InvoicingPostalCode__c = currentCase.InvoicingPostalCode__c;
                bp.InvoicingStreetNumber__c = currentCase.InvoicingStreetNumber__c;
                bp.InvoicingCityCode__c = currentCase.InvoicingCityCode__c;
                bp.InvoicingStreetCode__c = currentCase.InvoicingStreetCode__c;
                bp.InvoicingCity__c = currentCase.InvoicingCity__c;
                bp.InvoicingStreetNumberExtension__c = currentCase.InvoicingStreetNumberExtension__c;
                bp.InvoicingIsAddressVerified__c = currentCase.IsInvoicingVerified__c;
                bp.InvoicingPlace__c = currentCase.InvoicingPlace__c;
                bp.InvoicingStreetName__c = currentCase.InvoicingStreetName__c;
                bp.InvoicingCountry__c = currentCase.InvoicingCountry__c;
                bp.InvoicingProvince__c = currentCase.InvoicingProvince__c;
                bp.ReminderFlag__c = currentCase.ReminderFlag__c;
                bp.ReminderCertifiedEmailAddress__c = currentCase.ReminderCertifiedEmailAddress__c;
                objToUpdate = bp;
            }
            when else {
                System.debug('Sottoprocesso non supportato: ' + currentCase.SubProcess__c);
            }
        }

        if (objToUpdate != null) {
            HDT_UTL_DatabaseService.updateSObject(objToUpdate);
        }

        // Per tutti i sottoprocessi, tranne la Variaz. Gruppo IVA, inneschiamo il processo di Allineamento Anagrafica.
        if (!currentCase.SubProcess__c.equals('Variazione Gruppo IVA')) {
            List<Case> anagAlignCases = HDT_SRV_AnagAlignment.handleAnagAlignment(inputCase, HDT_SRV_AnagAlignment.HDT_ENU_AnagAlignmentContext.VARIAZIONE_ANAGRAFICA_CLIENTE);
            System.debug('# Case di Allineamento Anagrafica creati: ' + anagAlignCases.size());
        }
    }

    public void handleVariazioneAmministratore(SObject inputCase) {

        if (inputCase == null) {
            System.debug('handleVariazioneAmministratore: null input case.');
            return;
        }

        Case currentCase = (Case) inputCase;
        System.debug('Gestione dati VariazioneAmministratore da case: ' + currentCase.Id);

        switch on currentCase.SubProcess__c {
            when 'Cambio Amministratore' {
                String accountId = currentCase.AccountId;
                String newAdministratorId = currentCase.ContactId;
                HDT_QR_AccountContactRelation queryHandler = new HDT_QR_AccountContactRelation();
                AccountContactRelation currentAdminAcr = queryHandler.getActiveAdministratorRelation(accountId);
                if (currentAdminAcr != null) {
                    System.debug('Disassociazione Account ' + accountId + ' da Amministratore di condominio: ' + currentAdminAcr.ContactId);
                    currentAdminAcr.IsActive = False;
                    currentAdminAcr.EndDate = Date.today();
                    HDT_UTL_DatabaseService.updateSObject(currentAdminAcr);
                }
                
                AccountContactRelation newAdminAcr = new AccountContactRelation();
                newAdminAcr.AccountId = accountId;
                newAdminAcr.ContactId = newAdministratorId;
                newAdminAcr.IsActive = True;
                newAdminAcr.StartDate = Date.today();
                newAdminAcr.Roles = 'Amministratore condominio';
                System.debug('Associazione Account ' + accountId + ' ad Amministratore di condominio: ' + newAdministratorId);
                HDT_UTL_DatabaseService.insertSObject(newAdminAcr);
            }
            when 'Cambio Intest/Indirizzo Amministratore' {
                Contact c = new Contact();
                c.Id = currentCase.ContactId;
                c.MailingCityCode__c = currentCase.BillingCityCode__c;
                c.MailingCity = currentCase.BillingCity__c;

                c.MailingCountry = currentCase.BillingCountry__c;
                c.MailingIsAddressVerified__c = currentCase.BillingIsAddressVerified__c;
                c.MailingPlace__c = currentCase.BillingPlace__c;
                c.MailingPostalCode = currentCase.BillingPostalCode__c;
                c.MailingState = currentCase.BillingProvince__c;
                c.MailingStreetCode__c = currentCase.BillingStreetCode__c;
                c.MailingStreetName__c = currentCase.BillingStreetName__c;
                c.MailingStreetNumberExtension__c = currentCase.BillingStreetNumberExtension__c;
                c.MailingStreetNumber__c = currentCase.BillingStreetNumber__c;

                HDT_UTL_DatabaseService.updateSObject(c);
            }
            when else {
                System.debug('Sottoprocesso non supportato: ' + currentCase.SubProcess__c);
            }
        }
    }

    public void innescoAllineamentoAnagraficaFiscale(SObject inputCase) {
        if (inputCase == null) {
            System.debug('innescoAllineamentoAnagraficaFiscale: null input case.');
            return;
        }

        System.debug('Innesco Allineamento Anagrafica alla chiusura del Case Fiscale: ' + inputCase.Id);

        try {
            List<Case> anagAlignCases = HDT_SRV_AnagAlignment.handleAnagAlignment(inputCase, HDT_SRV_AnagAlignment.HDT_ENU_AnagAlignmentContext.VARIAZIONI_FISCALE);
            System.debug('# Case di Allineamento Anagrafica creati: ' + anagAlignCases.size());
        } catch (Exception ex) {
            System.debug('# Errore creazione Case di Allineamento Anagrafica: ' + ex.getMessage());
        }
    }

    public void innescoAllineamentoAnagraficaCanoneRai(SObject inputCase) {
        if (inputCase == null) {
            System.debug('innescoAllineamentoAnagraficaCanoneRai: null input case.');
            return;
        }

        System.debug('Innesco Allineamento Anagrafica alla chiusura del Case di Allineamento Canone RAI: ' + inputCase.Id);

        try {
            List<Case> anagAlignCases = HDT_SRV_AnagAlignment.handleAnagAlignment(inputCase, HDT_SRV_AnagAlignment.HDT_ENU_AnagAlignmentContext.ALLINEAMENTO_CANONE_RAI);
            System.debug('# Case di Allineamento Anagrafica creati: ' + anagAlignCases.size());
        } catch (Exception ex) {
            System.debug('# Errore creazione Case di Allineamento Anagrafica: ' + ex.getMessage());
        }
    }

    public void innescoAllineamentoAnagraficaGestioneDisalimentabilita(SObject inputCase) {
        if (inputCase == null) {
            System.debug('innescoAllineamentoGestioneDisalimentabilita: null input case.');
            return;
        }

        System.debug('Innesco Allineamento Anagrafica alla chiusura del Case di Gestione Disalimentabilit√†: ' + inputCase.Id);

        try {
            List<Case> anagAlignCases = HDT_SRV_AnagAlignment.handleAnagAlignment(inputCase, HDT_SRV_AnagAlignment.HDT_ENU_AnagAlignmentContext.GESTIONE_DISALIMENTABILITA);
            System.debug('# Case di Allineamento Anagrafica creati: ' + anagAlignCases.size());
        } catch (Exception ex) {
            System.debug('# Errore creazione Case di Allineamento Anagrafica: ' + ex.getMessage());
        }
    }

    public void evaluateEffectiveDate(SObject inputOrder){

        Order currentOrder = (Order) inputOrder;

        if(currentOrder.EffectiveDate__c != null && System.today() > currentOrder.EffectiveDate__c){

            currentOrder.EffectiveDate__c = orderSrv.addBusinessDay(System.today(), 3);

        }

    }

    public void sbloccoVoltura(SObject inputCase){

        Case currentCase = (Case) inputCase;

        if(currentCase.VulturePracticeReference__c != null){
            wrts_prcgvr__Activity__c activity = createActivity('Sblocco Voltura');
            activity.Order__c = currentCase.VulturePracticeReference__c;
            HDT_UTL_DatabaseService.insertSObject(activity);
        }

    }

    public void changePaymentMethod(SObject inputCase){

        Case currentCase = (Case) inputCase;
        BillingProfile__c billingProfile = new BillingProfile__c();

        billingProfile.Id = currentCase.BillingProfile__c;
        billingProfile.PaymentMethod__c = 'RID';

        HDT_UTL_DatabaseService.updateSObject(billingProfile);

    }

    public void advanceRelatedCase(SObject inputOrder){

        Order currentOrder = (Order) inputOrder;
        Case relatedCase = postsalesQr.getCaseByServicePoint('Allineamento Canone Rai', currentOrder.ServicePoint__c);
        if(relatedCase != null){
            if(!(currentOrder.PhaseStory__c.containsIgnoreCase('Errore Lavorazione SAP'))){
                relatedCase.Phase__c = 'Completata';
                HDT_UTL_DatabaseService.updateSObject(relatedCase);
            }else{
                wrts_prcgvr__Activity__c activity = createActivity('Elaborazione Manuale');
                activity.Case__c = relatedCase.Id;
                HDT_UTL_DatabaseService.insertSObject(activity);
            }
        }
    }

    public void updateServicePoint(SObject inputCase){

        Case currentCase = (Case) inputCase;
        ServicePoint__c servicePoint = new ServicePoint__c();
        servicePoint.Id             = currentCase.ServicePoint__c;
        servicePoint.UseCategory__c = currentCase.UseCategory__c;
        servicePoint.SupplyType__c  = currentCase.SupplyType__c;
        servicePoint.ImplantType__c	= currentCase.ServicePointType__c;
        HDT_UTL_DatabaseService.updateSObject(servicePoint);

    }

    //returns activity and has to be created inside the caller methdo because it has to be linked to an entity first
    private static wrts_prcgvr__Activity__c createActivity(String templateName){
        HDT_QR_PostSalesManager postsalesQr = new HDT_QR_PostSalesManager();
        wrts_prcgvr__ActivityTemplate__c template = postsalesQr.getActivityTemplate(templateName);
        wrts_prcgvr__Activity__c activity = new wrts_prcgvr__Activity__c();
        activity.wrts_prcgvr__ActivityTemplate__c = template.Id;
        activity.wrts_prcgvr__Description__c = template.wrts_prcgvr__Subject__c;
        return activity;
    }

    public void sendDocumentFile(SObject inputRecord){
        String recordId = (String)inputRecord.get('Id');
        Map<String,String> formParams = new Map<String,String>();
        formParams.put('mode', 'Print');
        formParams.put('Archiviato', 'Y');
        HDT_LC_DocumentSignatureManager.sendDocumentFile(recordId, 'Case', JSON.serialize(formParams));
    }
}
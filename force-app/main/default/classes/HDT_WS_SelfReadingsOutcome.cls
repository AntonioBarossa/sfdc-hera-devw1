@RestResource(urlMapping='/SelfReadingsOutcomeInboundService/*')
global with sharing class HDT_WS_SelfReadingsOutcome {
    
    @HttpPost
    global static void doPost() {

        RestRequest request = RestContext.request;
        RestResponse response = RestContext.response;
        HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse responseWrap = new HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse();

        response.statusCode = 201;

        try {
            String requestBody = request.requestBody.toString();
            HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeRequest requestWrap = (HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeRequest) JSON.deserialize(requestBody, HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeRequest.class);
            try {
                HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse outcomeResponse = handleRequest(requestWrap);
                responseWrap.outcome = 'OK';
                responseWrap.outcomeDescription = outcomeResponse.outcomeDescription;
            } catch (Exception e) {
                response.statusCode = 400;
                responseWrap.outcome = 'KO';
                responseWrap.outcomeDescription = e.getMessage();
            }
        } catch (Exception e) {
            //System.debug('Exception: ' + e.getMessage());
            response.statusCode = 500;
            responseWrap.outcome = 'KO';
            responseWrap.outcomeDescription = 'Error while parsing JSON body: ' + e.getMessage();
        } finally {
            response.responseBody = Blob.valueOf(JSON.serialize(responseWrap));
        }
    }

    static HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse handleRequest(HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeRequest req) {
        List<HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData> data = req.data;

        String objectName = 'wrts_prcgvr__ActivityTemplate__c';
        String queryStringKoMdm = 'Select Id from wrts_prcgvr__ActivityTemplate__c  where Name = \'CBS_AUT004__ESITO_KO_PRE-MDM\'';
        String queryStringKoSap = 'Select Id from wrts_prcgvr__ActivityTemplate__c  where Name = \'CBS_AUT002__ESITO_KO_DA_SAP\'';
        List<SObject> templatesKoMdm = HDT_QR_GenericQuery.getGenericRecords(queryStringKoMdm, objectName);
        List<SObject> templatesKoSap = HDT_QR_GenericQuery.getGenericRecords(queryStringKoSap, objectName);
        wrts_prcgvr__ActivityTemplate__c templateKoMdm = new wrts_prcgvr__ActivityTemplate__c();
        wrts_prcgvr__ActivityTemplate__c templateKoSap = new wrts_prcgvr__ActivityTemplate__c();

        if(templatesKoMdm.size() > 0) {
            templateKoMdm = (wrts_prcgvr__ActivityTemplate__c) templatesKoMdm[0];
        }

        if(templatesKoSap.size() > 0) {
            templateKoSap = (wrts_prcgvr__ActivityTemplate__c) templatesKoSap[0];
        }

        List<Case> casesToUpdate = new List<Case>();
        List<wrts_prcgvr__Activity__c> activitiesToCreate = new List<wrts_prcgvr__Activity__c>();

        Set<String> errorCodes = new Set<String>();
        Set<String> errorCodesDescriptionSet = new Set<String>();
        for (HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData outcomeData : data) {
            if (String.isBlank(outcomeData.caseId)) {
                continue; 
            }
            if (String.isNotBlank(outcomeData.activityType)) {
                if (outcomeData.activityType.equalsIgnoreCase('Esito KO da SAP') || outcomeData.activityType.equalsIgnoreCase('KO Pre-MDM')) {
                    errorCodes.add(outcomeData.errorCode);
                    if(String.isNotBlank(outcomeData.errorCode)){
                        errorCodesDescriptionSet.add(outcomeData.errorCode);
                    }else if(String.isNotBlank(outcomeData.errorDescription)) {
                        errorCodesDescriptionSet.add(outcomeData.errorDescription);
                    }
                }
            }
        }

        Map<String, Boolean> isAutomaticDiscardMap = HDT_UTL_SelfReadings.isAutomaticDiscard(errorCodesDescriptionSet);

        // TODO: verificare quanti record ci passa mulesoft per non sforare i limiti di sfdc.
        for (HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData outcomeData : data) {

            if (String.isBlank(outcomeData.caseId)) {
                continue;
            }

            Case caseToUpdate = new Case();
            caseToUpdate.Id = outcomeData.caseId;
            if (String.isNotBlank(outcomeData.activityType)) {
                if (outcomeData.activityType.equalsIgnoreCase('Esito OK da SAP')) {
                    caseToUpdate.Phase__c = 'Esito OK da SAP';
                } else if (outcomeData.activityType.equalsIgnoreCase('Esito KO da SAP')) {
                    caseToUpdate.Phase__c = 'Esito KO da SAP';
                } else if (outcomeData.activityType.equalsIgnoreCase('KO Pre-MDM')) {
                    caseToUpdate.Phase__c = 'Esito KO pre-MDM';
                }
            }

            Boolean isAutomaticDiscard = false;
            if (String.isNotBlank(outcomeData.errorCode)) {
                try {
                    isAutomaticDiscard = isAutomaticDiscardMap.get(outcomeData.errorCode);
                } catch (Exception e) {
                    System.debug('Exception: ' + e.getMessage());
                    System.debug('Stacktrace: ' + e.getStackTraceString());
                }
            }else if(String.isNotBlank(outcomeData.errorDescription)){
                try {
                    isAutomaticDiscard = isAutomaticDiscardMap.get(outcomeData.errorDescription);
                } catch (Exception e) {
                    System.debug('Exception: ' + e.getMessage());
                    System.debug('Stacktrace: ' + e.getStackTraceString());
                }
            }
            
            if (isAutomaticDiscard) {
                caseToUpdate.Status = 'Closed';
                String errorDescription = caseToUpdate.Phase__c; // Esito KO pre-MDM oppure Esito KO da SAP
                if (String.isNotBlank(outcomeData.errorDescription)) {
                    errorDescription += ' - ' + outcomeData.errorDescription;
                }
                caseToUpdate.Subject = errorDescription;  // tracciamo l'errore su Subject poichè Description potrebbe già contenere qualcosa e non possiamo permetterci di querare il case per andare in append.
                caseToUpdate.Phase__c = 'KO Definitivo';  // skippiamo le fasi Esito KO pre-MDM / Esito KO da SAP poichè non possiamo permetterci un doppio update di fase.
            } else {
                // Creazione activity per successiva lavorazione dello scarto.
                String errorDescriptionAct = '';
                if(String.isNotBlank(outcomeData.errorDescription)){
                    errorDescriptionAct = outcomeData.errorDescription;
                }
                if(String.isNotBlank(outcomeData.errorCode)){
                    errorDescriptionAct = errorDescriptionAct + ' ' + outcomeData.errorCode;
                }
                switch on caseToUpdate.Phase__c {
                    when 'Esito KO da SAP' {
                        wrts_prcgvr__Activity__c activity = new wrts_prcgvr__Activity__c();
                        activity.wrts_prcgvr__ActivityTemplate__c = templateKoSap.Id;
                        activity.Case__c = caseToUpdate.Id;
                        activity.wrts_prcgvr__Description__c = outcomeData.errorDescription + ' ' + outcomeData.errorCode;
                        activitiesToCreate.add(activity);
                    }
                    when 'Esito KO pre-MDM' {
                        wrts_prcgvr__Activity__c activity = new wrts_prcgvr__Activity__c();
                        activity.wrts_prcgvr__ActivityTemplate__c = templateKoMdm.Id;
                        activity.Case__c = caseToUpdate.Id;
                        activity.wrts_prcgvr__Description__c = outcomeData.errorDescription + ' ' + outcomeData.errorCode;
                        activitiesToCreate.add(activity);
                    }
                }
            }

            casesToUpdate.add(caseToUpdate);
        }

        // Deleghiamo le DML ad un queueable per non fare andare in timeout Mulesoft.
        System.enqueueJob(new HDT_QBL_SelfReadingsOutcome(casesToUpdate, activitiesToCreate));

        HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse res = new HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse();
        if (casesToUpdate.isEmpty() && activitiesToCreate.isEmpty()) {
            res.outcomeDescription = 'No DML operation performed.';
        }

        return res;
    }
}
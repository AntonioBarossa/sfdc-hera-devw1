@isTest
public with sharing class HDT_WS_SelfReadingsOutcomeTst {
    
    //DEBUG
    
    
    //DATA
    private static HDT_UTL_Constants constants = new HDT_UTL_Constants();
    
    
    
    //TEST SETUP
    private static void mySetup(){
        List<Account> acc = HDT_UTL_DataFactoryTst.createAccountBusiness(1, true, 'HERA COMM', 'Azienda', 'Aziende SME');
        List<BillingProfile__c> bpf = HDT_UTL_DataFactoryTst.createBillingProfile(1, true, acc[0].Id);
        List<Order> ordList = HDT_UTL_DataFactoryTst.createOrder(1, true, acc[0].Id, 'Bozza');
        List<Contact> contactList = HDT_UTL_DataFactoryTst.createContact(1, true, acc[0].Id);
        List<ServicePoint__c> servPointList = HDT_UTL_DataFactoryTst.createServicePoint(1, true);
        List<Contract> contractList = HDT_UTL_DataFactoryTst.createContract(1, true, acc[0].id);
        List<Case> caseList = HDT_UTL_DataFactoryTst.createCaseAutolettura(1, true, acc[0].id, contactList[0].Id, servPointList[0].id, contractList[0].id, ordList[0].id);
        HDT_UTL_DataFactoryTst.pClickCasePhase();
    }
    
    
    //TESTS
    //doPost
    @isTest
    private static void doPostTest() {
        
        //SETUP
        mySetup();
        
        //CASE & PHASE
        Case myCase = [SELECT Id FROM Case];
        
        String rtName = constants.CASE_RECORDTYPE_DEVELOPERNAME_AUTOLETTURA;
        String rtId = constants.CASE_RECORDTYPEID_AUTOLETTURA;
        HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'Esito OK da SAP', 'Bozza', rtId, rtName,'A','','','');
        
        
        //MANAGING BODY RESPONSE
        HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeRequest myOutcomeRequest;
        myOutcomeRequest = new HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeRequest();
        
        HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData singleData;
        singleData = new HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData();
        singleData.caseId = myCase.Id;
        singleData.activityType = 'Esito OK da SAP';
        singleData.errorCode = '';
        singleData.errorDescription = '';
        
        List<HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData> data;
        data = new List<HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData>{singleData};
        myOutcomeRequest.data = data;
        
        
        //REST CONTEXT
        RestRequest req = new RestRequest();
        RestResponse res = new RestResponse();
        
        req.requestBody = Blob.valueOf(JSON.serialize(myOutcomeRequest));
        
        RestContext.request = req;
        RestContext.response = res;
        
        //TESTING
        Test.startTest();
        HDT_WS_SelfReadingsOutcome.doPost();
        Test.stopTest();
        
        //RETRIEVING DATA
        Case myCaseUpdated = [SELECT Id, Phase__c FROM Case];
        
        //ASSERTS
        HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse responseWrap;
        responseWrap = new HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse();
        
        System.assertEquals(201, RestContext.response.statusCode, 'Status code non 201.');
        System.assertEquals('Esito OK da SAP', myCaseUpdated.Phase__c, 'Fase del Case Errata.');
        
    }
    
    
    //TODO: TEST DEL METODO doPost CON CASISTICHE CON KO
    @isTest
    private static void doPostTest_ESITO_KO_SAP() {
        
        //SETUP
        mySetup();
        
        //CASE & PHASE
        Case myCase = [SELECT Id FROM Case];
        
        String rtName = constants.CASE_RECORDTYPE_DEVELOPERNAME_AUTOLETTURA;
        String rtId = constants.CASE_RECORDTYPEID_AUTOLETTURA;
        HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'Esito KO da SAP', 'Bozza', rtId, rtName,'A','','','');
        
        
        //MANAGING BODY RESPONSE
        HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeRequest myOutcomeRequest;
        myOutcomeRequest = new HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeRequest();
        
        HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData singleData;
        singleData = new HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData();
        singleData.caseId = myCase.Id;
        singleData.activityType = 'Esito KO da SAP';
        singleData.errorCode = '';
        singleData.errorDescription = '';
        
        List<HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData> data;
        data = new List<HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData>{singleData};
        myOutcomeRequest.data = data;
        
        
        //REST CONTEXT
        RestRequest req = new RestRequest();
        RestResponse res = new RestResponse();
        
        req.requestBody = Blob.valueOf(JSON.serialize(myOutcomeRequest));
        
        RestContext.request = req;
        RestContext.response = res;
        
        //TESTING
        Test.startTest();
        HDT_WS_SelfReadingsOutcome.doPost();
        Test.stopTest();
        
        //RETRIEVING DATA
        Case myCaseUpdated = [SELECT Id, Phase__c FROM Case];
        
        //ASSERTS
        HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse responseWrap;
        responseWrap = new HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse();
        
        System.assertEquals(201, RestContext.response.statusCode, 'Status code non 201.');
        System.assertEquals('Esito KO da SAP', myCaseUpdated.Phase__c, 'Fase del Case Errata.');
        
    }
    
    
    
    
    @isTest
    private static void doPostTest_ESITO_KO_PREMDM() {
        
        //SETUP
        mySetup();
        
        //CASE & PHASE
        Case myCase = [SELECT Id FROM Case];
        
        String rtName = constants.CASE_RECORDTYPE_DEVELOPERNAME_AUTOLETTURA;
        String rtId = constants.CASE_RECORDTYPEID_AUTOLETTURA;
        HDT_UTL_DataFactoryTst.createPhaseTransition(true, 'KO Pre-MDM', 'Bozza', rtId, rtName,'A','','','');
        
        
        //MANAGING BODY RESPONSE
        HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeRequest myOutcomeRequest;
        myOutcomeRequest = new HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeRequest();
        
        HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData singleData;
        singleData = new HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData();
        singleData.caseId = myCase.Id;
        singleData.activityType = 'KO Pre-MDM';
        singleData.errorCode = '';
        singleData.errorDescription = '';
        
        List<HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData> data;
        data = new List<HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeData>{singleData};
        myOutcomeRequest.data = data;
        
        
        //REST CONTEXT
        RestRequest req = new RestRequest();
        RestResponse res = new RestResponse();
        
        req.requestBody = Blob.valueOf(JSON.serialize(myOutcomeRequest));
        
        RestContext.request = req;
        RestContext.response = res;
        
        //TESTING
        Test.startTest();
        HDT_WS_SelfReadingsOutcome.doPost();
        Test.stopTest();
        
        //RETRIEVING DATA
        Case myCaseUpdated = [SELECT Id, Phase__c FROM Case];
        
        //ASSERTS
        HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse responseWrap;
        responseWrap = new HDT_WRP_SelfReadingsOutcome.HDT_WRP_SelfReadingsOutcomeResponse();
        
        System.assertEquals(201, RestContext.response.statusCode, 'Status code non 201.');
        System.assertEquals('KO Pre-MDM', myCaseUpdated.Phase__c, 'Fase del Case Errata.');
        
    }
    
    //TODO: AUTOMATIC DISCARD
    
    
    
    //TODO: TESTARE activityType (Phase) MULTIPLI
    
    
    
    
    //TODO: CASISTICHE ECCEZIONE
    ///ERROR 400
    
    
    ///ERROR 500
    
    
    
    
}
